
Project_Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003d4c  00003dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027cc  00000000  00000000  00003dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bdf  00000000  00000000  00006594  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00007173  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000072d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00007462  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000094a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c0 1c 	call	0x3980	; 0x3980 <main>
      7a:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <GPIO_setupPinDirection+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <GPIO_setupPinDirection+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <GPIO_setupPinDirection+0x1c>
     ca8:	d5 c0       	rjmp	.+426    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <GPIO_setupPinDirection+0x24>
     cb0:	d1 c0       	rjmp	.+418    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <GPIO_setupPinDirection+0x3a>
     cc6:	43 c0       	rjmp	.+134    	; 0xd4e <GPIO_setupPinDirection+0xc0>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <GPIO_setupPinDirection+0x4e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <GPIO_setupPinDirection+0x68>
     cda:	bc c0       	rjmp	.+376    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <GPIO_setupPinDirection+0x5a>
     ce6:	5f c0       	rjmp	.+190    	; 0xda6 <GPIO_setupPinDirection+0x118>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <GPIO_setupPinDirection+0x66>
     cf2:	85 c0       	rjmp	.+266    	; 0xdfe <GPIO_setupPinDirection+0x170>
     cf4:	af c0       	rjmp	.+350    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	a1 f4       	brne	.+40     	; 0xd24 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_setupPinDirection+0x8c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_setupPinDirection+0x88>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	98 c0       	rjmp	.+304    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d24:	aa e3       	ldi	r26, 0x3A	; 58
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ea e3       	ldi	r30, 0x3A	; 58
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <GPIO_setupPinDirection+0xb4>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <GPIO_setupPinDirection+0xb0>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	83 c0       	rjmp	.+262    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	a1 f4       	brne	.+40     	; 0xd7c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d54:	a7 e3       	ldi	r26, 0x37	; 55
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e3       	ldi	r30, 0x37	; 55
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <GPIO_setupPinDirection+0xe4>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <GPIO_setupPinDirection+0xe0>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	6c c0       	rjmp	.+216    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d7c:	a7 e3       	ldi	r26, 0x37	; 55
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e3       	ldi	r30, 0x37	; 55
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <GPIO_setupPinDirection+0x10c>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <GPIO_setupPinDirection+0x108>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	57 c0       	rjmp	.+174    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	a1 f4       	brne	.+40     	; 0xdd4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dac:	a4 e3       	ldi	r26, 0x34	; 52
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e4 e3       	ldi	r30, 0x34	; 52
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <GPIO_setupPinDirection+0x13c>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <GPIO_setupPinDirection+0x138>
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     dd4:	a4 e3       	ldi	r26, 0x34	; 52
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e4 e3       	ldi	r30, 0x34	; 52
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <GPIO_setupPinDirection+0x164>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <GPIO_setupPinDirection+0x160>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	2b c0       	rjmp	.+86     	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	a1 f4       	brne	.+40     	; 0xe2c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e04:	a1 e3       	ldi	r26, 0x31	; 49
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e3       	ldi	r30, 0x31	; 49
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_setupPinDirection+0x194>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_setupPinDirection+0x190>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e2c:	a1 e3       	ldi	r26, 0x31	; 49
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e1 e3       	ldi	r30, 0x31	; 49
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <GPIO_setupPinDirection+0x1bc>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <GPIO_setupPinDirection+0x1b8>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPIO_writePin+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_writePin+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	6a 83       	std	Y+2, r22	; 0x02
     e76:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <GPIO_writePin+0x1c>
     e7e:	d5 c0       	rjmp	.+426    	; 0x102a <GPIO_writePin+0x1c6>
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	08 f0       	brcs	.+2      	; 0xe88 <GPIO_writePin+0x24>
     e86:	d1 c0       	rjmp	.+418    	; 0x102a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3d 83       	std	Y+5, r19	; 0x05
     e90:	2c 83       	std	Y+4, r18	; 0x04
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	9d 81       	ldd	r25, Y+5	; 0x05
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <GPIO_writePin+0x3a>
     e9c:	43 c0       	rjmp	.+134    	; 0xf24 <GPIO_writePin+0xc0>
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <GPIO_writePin+0x4e>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	71 f0       	breq	.+28     	; 0xecc <GPIO_writePin+0x68>
     eb0:	bc c0       	rjmp	.+376    	; 0x102a <GPIO_writePin+0x1c6>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <GPIO_writePin+0x5a>
     ebc:	5f c0       	rjmp	.+190    	; 0xf7c <GPIO_writePin+0x118>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <GPIO_writePin+0x66>
     ec8:	85 c0       	rjmp	.+266    	; 0xfd4 <GPIO_writePin+0x170>
     eca:	af c0       	rjmp	.+350    	; 0x102a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	a1 f4       	brne	.+40     	; 0xefa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ed2:	ab e3       	ldi	r26, 0x3B	; 59
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	eb e3       	ldi	r30, 0x3B	; 59
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_writePin+0x8c>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_writePin+0x88>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	98 c0       	rjmp	.+304    	; 0x102a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     efa:	ab e3       	ldi	r26, 0x3B	; 59
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e3       	ldi	r30, 0x3B	; 59
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <GPIO_writePin+0xb4>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <GPIO_writePin+0xb0>
     f1c:	80 95       	com	r24
     f1e:	84 23       	and	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	83 c0       	rjmp	.+262    	; 0x102a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	a1 f4       	brne	.+40     	; 0xf52 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f2a:	a8 e3       	ldi	r26, 0x38	; 56
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e8 e3       	ldi	r30, 0x38	; 56
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <GPIO_writePin+0xe4>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <GPIO_writePin+0xe0>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	6c c0       	rjmp	.+216    	; 0x102a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f52:	a8 e3       	ldi	r26, 0x38	; 56
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 e3       	ldi	r30, 0x38	; 56
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_writePin+0x10c>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_writePin+0x108>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	57 c0       	rjmp	.+174    	; 0x102a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	a1 f4       	brne	.+40     	; 0xfaa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f82:	a5 e3       	ldi	r26, 0x35	; 53
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e3       	ldi	r30, 0x35	; 53
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_writePin+0x13c>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_writePin+0x138>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	40 c0       	rjmp	.+128    	; 0x102a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     faa:	a5 e3       	ldi	r26, 0x35	; 53
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e3       	ldi	r30, 0x35	; 53
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_writePin+0x164>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_writePin+0x160>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	2b c0       	rjmp	.+86     	; 0x102a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	a1 f4       	brne	.+40     	; 0x1002 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fda:	a2 e3       	ldi	r26, 0x32	; 50
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e2 e3       	ldi	r30, 0x32	; 50
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_writePin+0x194>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_writePin+0x190>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	14 c0       	rjmp	.+40     	; 0x102a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1002:	a2 e3       	ldi	r26, 0x32	; 50
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e2 e3       	ldi	r30, 0x32	; 50
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_writePin+0x1bc>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_writePin+0x1b8>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <GPIO_readPin+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <GPIO_readPin+0x8>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	8a 83       	std	Y+2, r24	; 0x02
    104a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    104c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	08 f0       	brcs	.+2      	; 0x1056 <GPIO_readPin+0x1c>
    1054:	84 c0       	rjmp	.+264    	; 0x115e <GPIO_readPin+0x124>
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	08 f0       	brcs	.+2      	; 0x105e <GPIO_readPin+0x24>
    105c:	80 c0       	rjmp	.+256    	; 0x115e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	4c 81       	ldd	r20, Y+4	; 0x04
    106a:	5d 81       	ldd	r21, Y+5	; 0x05
    106c:	41 30       	cpi	r20, 0x01	; 1
    106e:	51 05       	cpc	r21, r1
    1070:	79 f1       	breq	.+94     	; 0x10d0 <GPIO_readPin+0x96>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	91 05       	cpc	r25, r1
    107a:	34 f4       	brge	.+12     	; 0x1088 <GPIO_readPin+0x4e>
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	69 f0       	breq	.+26     	; 0x10a0 <GPIO_readPin+0x66>
    1086:	6b c0       	rjmp	.+214    	; 0x115e <GPIO_readPin+0x124>
    1088:	4c 81       	ldd	r20, Y+4	; 0x04
    108a:	5d 81       	ldd	r21, Y+5	; 0x05
    108c:	42 30       	cpi	r20, 0x02	; 2
    108e:	51 05       	cpc	r21, r1
    1090:	b9 f1       	breq	.+110    	; 0x1100 <GPIO_readPin+0xc6>
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <GPIO_readPin+0x64>
    109c:	49 c0       	rjmp	.+146    	; 0x1130 <GPIO_readPin+0xf6>
    109e:	5f c0       	rjmp	.+190    	; 0x115e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10a0:	e9 e3       	ldi	r30, 0x39	; 57
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_readPin+0x7e>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_readPin+0x7a>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	88 23       	and	r24, r24
    10c4:	19 f0       	breq	.+6      	; 0x10cc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	49 c0       	rjmp	.+146    	; 0x115e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10cc:	19 82       	std	Y+1, r1	; 0x01
    10ce:	47 c0       	rjmp	.+142    	; 0x115e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10d0:	e6 e3       	ldi	r30, 0x36	; 54
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_readPin+0xae>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_readPin+0xaa>
    10ec:	ca 01       	movw	r24, r20
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	90 70       	andi	r25, 0x00	; 0
    10f2:	88 23       	and	r24, r24
    10f4:	19 f0       	breq	.+6      	; 0x10fc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	31 c0       	rjmp	.+98     	; 0x115e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	2f c0       	rjmp	.+94     	; 0x115e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1100:	e3 e3       	ldi	r30, 0x33	; 51
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <GPIO_readPin+0xde>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <GPIO_readPin+0xda>
    111c:	ca 01       	movw	r24, r20
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	90 70       	andi	r25, 0x00	; 0
    1122:	88 23       	and	r24, r24
    1124:	19 f0       	breq	.+6      	; 0x112c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	19 c0       	rjmp	.+50     	; 0x115e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	17 c0       	rjmp	.+46     	; 0x115e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1130:	e0 e3       	ldi	r30, 0x30	; 48
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_readPin+0x10e>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_readPin+0x10a>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	88 23       	and	r24, r24
    1154:	19 f0       	breq	.+6      	; 0x115c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	01 c0       	rjmp	.+2      	; 0x115e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    115c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_setupPortDirection+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <GPIO_setupPortDirection+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	90 f5       	brcc	.+100    	; 0x11ea <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3c 83       	std	Y+4, r19	; 0x04
    118e:	2b 83       	std	Y+3, r18	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	d1 f0       	breq	.+52     	; 0x11ce <GPIO_setupPortDirection+0x5e>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	2c f4       	brge	.+10     	; 0x11ae <GPIO_setupPortDirection+0x3e>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <GPIO_setupPortDirection+0x54>
    11ac:	1e c0       	rjmp	.+60     	; 0x11ea <GPIO_setupPortDirection+0x7a>
    11ae:	2b 81       	ldd	r18, Y+3	; 0x03
    11b0:	3c 81       	ldd	r19, Y+4	; 0x04
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	81 f0       	breq	.+32     	; 0x11d8 <GPIO_setupPortDirection+0x68>
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <GPIO_setupPortDirection+0x72>
    11c2:	13 c0       	rjmp	.+38     	; 0x11ea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11d8:	e4 e3       	ldi	r30, 0x34	; 52
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 83       	st	Z, r24
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11e2:	e1 e3       	ldi	r30, 0x31	; 49
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <GPIO_writePort+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <GPIO_writePort+0x8>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	90 f5       	brcc	.+100    	; 0x1272 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3c 83       	std	Y+4, r19	; 0x04
    1216:	2b 83       	std	Y+3, r18	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	d1 f0       	breq	.+52     	; 0x1256 <GPIO_writePort+0x5e>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <GPIO_writePort+0x3e>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 f0       	breq	.+24     	; 0x124c <GPIO_writePort+0x54>
    1234:	1e c0       	rjmp	.+60     	; 0x1272 <GPIO_writePort+0x7a>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <GPIO_writePort+0x68>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <GPIO_writePort+0x72>
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	80 83       	st	Z, r24
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1260:	e5 e3       	ldi	r30, 0x35	; 53
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 83       	st	Z, r24
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	80 83       	st	Z, r24
			break;
		}
	}
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <GPIO_readPort+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <GPIO_readPort+0x8>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    128e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	90 f5       	brcc	.+100    	; 0x12fa <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3c 83       	std	Y+4, r19	; 0x04
    129e:	2b 83       	std	Y+3, r18	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	d1 f0       	breq	.+52     	; 0x12de <GPIO_readPort+0x5e>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	2c f4       	brge	.+10     	; 0x12be <GPIO_readPort+0x3e>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <GPIO_readPort+0x54>
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <GPIO_readPort+0x7a>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <GPIO_readPort+0x68>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <GPIO_readPort+0x72>
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12d4:	e9 e3       	ldi	r30, 0x39	; 57
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	0e c0       	rjmp	.+28     	; 0x12fa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12de:	e6 e3       	ldi	r30, 0x36	; 54
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12e8:	e3 e3       	ldi	r30, 0x33	; 51
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12f2:	e0 e3       	ldi	r30, 0x30	; 48
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <KEYPAD_getPressedKey>:
 * ----------------------------
 *   Retrieves the pressed key on the keypad
 *   returns: the pressed key
 */
uint8 KEYPAD_getPressedKey(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	60 97       	sbiw	r28, 0x10	; 16
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
	uint8 row, column;

	/* Set up pin directions for rows and columns */
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    131e:	18 8a       	std	Y+16, r1	; 0x10
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <KEYPAD_getPressedKey+0x2e>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
    1322:	88 89       	ldd	r24, Y+16	; 0x10
    1324:	98 2f       	mov	r25, r24
    1326:	9c 5f       	subi	r25, 0xFC	; 252
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	69 2f       	mov	r22, r25
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
uint8 KEYPAD_getPressedKey(void)
{
	uint8 row, column;

	/* Set up pin directions for rows and columns */
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1332:	88 89       	ldd	r24, Y+16	; 0x10
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	88 8b       	std	Y+16, r24	; 0x10
    1338:	88 89       	ldd	r24, Y+16	; 0x10
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	90 f3       	brcs	.-28     	; 0x1322 <KEYPAD_getPressedKey+0x18>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);

	for (column = 0; column < KEYPAD_NUM_COLS; column++)
    133e:	1f 86       	std	Y+15, r1	; 0x0f
    1340:	0b c0       	rjmp	.+22     	; 0x1358 <KEYPAD_getPressedKey+0x4e>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column, PIN_INPUT);
    1342:	8f 85       	ldd	r24, Y+15	; 0x0f
    1344:	98 2f       	mov	r25, r24
    1346:	9e 5f       	subi	r25, 0xFE	; 254
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	69 2f       	mov	r22, r25
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>

	/* Set up pin directions for rows and columns */
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);

	for (column = 0; column < KEYPAD_NUM_COLS; column++)
    1352:	8f 85       	ldd	r24, Y+15	; 0x0f
    1354:	8f 5f       	subi	r24, 0xFF	; 255
    1356:	8f 87       	std	Y+15, r24	; 0x0f
    1358:	8f 85       	ldd	r24, Y+15	; 0x0f
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	90 f3       	brcs	.-28     	; 0x1342 <KEYPAD_getPressedKey+0x38>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column, PIN_INPUT);

	while (1)
	{
		/* loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    135e:	18 8a       	std	Y+16, r1	; 0x10
    1360:	b4 c0       	rjmp	.+360    	; 0x14ca <KEYPAD_getPressedKey+0x1c0>
		{
			/* Set the current row pin as output */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
    1362:	88 89       	ldd	r24, Y+16	; 0x10
    1364:	98 2f       	mov	r25, r24
    1366:	9c 5f       	subi	r25, 0xFC	; 252
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	69 2f       	mov	r22, r25
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);
    1372:	88 89       	ldd	r24, Y+16	; 0x10
    1374:	98 2f       	mov	r25, r24
    1376:	9c 5f       	subi	r25, 0xFC	; 252
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	69 2f       	mov	r22, r25
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>

			/* loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    1382:	1f 86       	std	Y+15, r1	; 0x0f
    1384:	22 c0       	rjmp	.+68     	; 0x13ca <KEYPAD_getPressedKey+0xc0>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column) == KEYPAD_BUTTON_PRESSED)
    1386:	8f 85       	ldd	r24, Y+15	; 0x0f
    1388:	98 2f       	mov	r25, r24
    138a:	9e 5f       	subi	r25, 0xFE	; 254
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	69 2f       	mov	r22, r25
    1390:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_readPin>
    1394:	88 23       	and	r24, r24
    1396:	b1 f4       	brne	.+44     	; 0x13c4 <KEYPAD_getPressedKey+0xba>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row * KEYPAD_NUM_COLS) + column +1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row *KEYPAD_NUM_COLS) + column + 1);
    1398:	88 89       	ldd	r24, Y+16	; 0x10
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	98 2f       	mov	r25, r24
    13a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13aa:	89 0f       	add	r24, r25
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <KEYPAD_4x4_adjustKeyNumber>
			/* Restore row pins as inputs */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    13b2:	60 96       	adiw	r28, 0x10	; 16
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			/* loop for columns */
			for (column = 0; column < KEYPAD_NUM_COLS; column++)
    13c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	8f 87       	std	Y+15, r24	; 0x0f
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	d8 f2       	brcs	.-74     	; 0x1386 <KEYPAD_getPressedKey+0x7c>
						#endif
					#endif
				}
			}
			/* Restore row pins as inputs */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
    13d0:	88 89       	ldd	r24, Y+16	; 0x10
    13d2:	98 2f       	mov	r25, r24
    13d4:	9c 5f       	subi	r25, 0xFC	; 252
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	69 2f       	mov	r22, r25
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 ea       	ldi	r26, 0xA0	; 160
    13e6:	b0 e4       	ldi	r27, 0x40	; 64
    13e8:	8b 87       	std	Y+11, r24	; 0x0b
    13ea:	9c 87       	std	Y+12, r25	; 0x0c
    13ec:	ad 87       	std	Y+13, r26	; 0x0d
    13ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4a e7       	ldi	r20, 0x7A	; 122
    13fe:	55 e4       	ldi	r21, 0x45	; 69
    1400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8f 83       	std	Y+7, r24	; 0x07
    140a:	98 87       	std	Y+8, r25	; 0x08
    140c:	a9 87       	std	Y+9, r26	; 0x09
    140e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	78 85       	ldd	r23, Y+8	; 0x08
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	2c f4       	brge	.+10     	; 0x1432 <KEYPAD_getPressedKey+0x128>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <KEYPAD_getPressedKey+0x1a6>
	else if (__tmp > 65535)
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	4c f5       	brge	.+82     	; 0x149c <KEYPAD_getPressedKey+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <KEYPAD_getPressedKey+0x188>
    1474:	80 e9       	ldi	r24, 0x90	; 144
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <KEYPAD_getPressedKey+0x176>
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f7       	brne	.-38     	; 0x1474 <KEYPAD_getPressedKey+0x16a>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <KEYPAD_getPressedKey+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	8d 83       	std	Y+5, r24	; 0x05
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <KEYPAD_getPressedKey+0x1b2>
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_PIN_ID + column, PIN_INPUT);

	while (1)
	{
		/* loop for rows */
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    14c4:	88 89       	ldd	r24, Y+16	; 0x10
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	88 8b       	std	Y+16, r24	; 0x10
    14ca:	88 89       	ldd	r24, Y+16	; 0x10
    14cc:	84 30       	cpi	r24, 0x04	; 4
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <KEYPAD_getPressedKey+0x1c8>
    14d0:	48 cf       	rjmp	.-368    	; 0x1362 <KEYPAD_getPressedKey+0x58>
    14d2:	45 cf       	rjmp	.-374    	; 0x135e <KEYPAD_getPressedKey+0x54>

000014d4 <KEYPAD_4x4_adjustKeyNumber>:
 *   Adjusts the keypad pressed button value for a 4x4 keypad
 *   button_number: the button number pressed on the keypad
 *   returns: the adjusted key value
 */
static uint8 KEYPAD_4x4_adjustKeyNumber (uint8 button_number)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <KEYPAD_4x4_adjustKeyNumber+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key = 0;
    14e2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3c 83       	std	Y+4, r19	; 0x04
    14ec:	2b 83       	std	Y+3, r18	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	88 30       	cpi	r24, 0x08	; 8
    14f4:	91 05       	cpc	r25, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <KEYPAD_4x4_adjustKeyNumber+0x26>
    14f8:	70 c0       	rjmp	.+224    	; 0x15da <KEYPAD_4x4_adjustKeyNumber+0x106>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	29 30       	cpi	r18, 0x09	; 9
    1500:	31 05       	cpc	r19, r1
    1502:	5c f5       	brge	.+86     	; 0x155a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    150e:	59 c0       	rjmp	.+178    	; 0x15c2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1510:	2b 81       	ldd	r18, Y+3	; 0x03
    1512:	3c 81       	ldd	r19, Y+4	; 0x04
    1514:	25 30       	cpi	r18, 0x05	; 5
    1516:	31 05       	cpc	r19, r1
    1518:	9c f4       	brge	.+38     	; 0x1540 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1524:	48 c0       	rjmp	.+144    	; 0x15b6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	0c f0       	brlt	.+2      	; 0x1532 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1530:	45 c0       	rjmp	.+138    	; 0x15bc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    153c:	39 c0       	rjmp	.+114    	; 0x15b0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    153e:	67 c0       	rjmp	.+206    	; 0x160e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	26 30       	cpi	r18, 0x06	; 6
    1546:	31 05       	cpc	r19, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <KEYPAD_4x4_adjustKeyNumber+0x78>
    154a:	41 c0       	rjmp	.+130    	; 0x15ce <KEYPAD_4x4_adjustKeyNumber+0xfa>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	87 30       	cpi	r24, 0x07	; 7
    1552:	91 05       	cpc	r25, r1
    1554:	0c f0       	brlt	.+2      	; 0x1558 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1556:	3e c0       	rjmp	.+124    	; 0x15d4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1558:	37 c0       	rjmp	.+110    	; 0x15c8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	2c 30       	cpi	r18, 0x0C	; 12
    1560:	31 05       	cpc	r19, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1564:	46 c0       	rjmp	.+140    	; 0x15f2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	8d 30       	cpi	r24, 0x0D	; 13
    156c:	91 05       	cpc	r25, r1
    156e:	5c f4       	brge	.+22     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1570:	2b 81       	ldd	r18, Y+3	; 0x03
    1572:	3c 81       	ldd	r19, Y+4	; 0x04
    1574:	2a 30       	cpi	r18, 0x0A	; 10
    1576:	31 05       	cpc	r19, r1
    1578:	b1 f1       	breq	.+108    	; 0x15e6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	8b 30       	cpi	r24, 0x0B	; 11
    1580:	91 05       	cpc	r25, r1
    1582:	a4 f5       	brge	.+104    	; 0x15ec <KEYPAD_4x4_adjustKeyNumber+0x118>
    1584:	2d c0       	rjmp	.+90     	; 0x15e0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	2e 30       	cpi	r18, 0x0E	; 14
    158c:	31 05       	cpc	r19, r1
    158e:	b9 f1       	breq	.+110    	; 0x15fe <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	8e 30       	cpi	r24, 0x0E	; 14
    1596:	91 05       	cpc	r25, r1
    1598:	7c f1       	brlt	.+94     	; 0x15f8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	2f 30       	cpi	r18, 0x0F	; 15
    15a0:	31 05       	cpc	r19, r1
    15a2:	79 f1       	breq	.+94     	; 0x1602 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	80 31       	cpi	r24, 0x10	; 16
    15aa:	91 05       	cpc	r25, r1
    15ac:	69 f1       	breq	.+90     	; 0x1608 <KEYPAD_4x4_adjustKeyNumber+0x134>
    15ae:	2f c0       	rjmp	.+94     	; 0x160e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1 : key = 7;
    15b0:	87 e0       	ldi	r24, 0x07	; 7
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	2e c0       	rjmp	.+92     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 2 : key = 8;
    15b6:	88 e0       	ldi	r24, 0x08	; 8
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	2b c0       	rjmp	.+86     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 3 : key = 9;
    15bc:	89 e0       	ldi	r24, 0x09	; 9
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	28 c0       	rjmp	.+80     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 4 : key = '/';
    15c2:	8f e2       	ldi	r24, 0x2F	; 47
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	25 c0       	rjmp	.+74     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 5 : key = 4;
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	22 c0       	rjmp	.+68     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 6 : key = 5;
    15ce:	85 e0       	ldi	r24, 0x05	; 5
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	1f c0       	rjmp	.+62     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 7 : key = 6;
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	1c c0       	rjmp	.+56     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 8 : key = '*';
    15da:	8a e2       	ldi	r24, 0x2A	; 42
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	19 c0       	rjmp	.+50     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 9 : key = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 10: key = 2;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 11: key = 3;
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	10 c0       	rjmp	.+32     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 12: key = '-';
    15f2:	8d e2       	ldi	r24, 0x2D	; 45
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 13: key = 13;
    15f8:	8d e0       	ldi	r24, 0x0D	; 13
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 14: key = 0;
    15fe:	19 82       	std	Y+1, r1	; 0x01
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 15: key = '=';
    1602:	8d e3       	ldi	r24, 0x3D	; 61
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 16: key = '+';
    1608:	8b e2       	ldi	r24, 0x2B	; 43
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		default: key = button_number;
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
	}
	return key;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <LCD_SendCommand>:

/*
 * Function to send a command to the LCD
 */
void LCD_SendCommand(uint8 command)
{
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	c9 5a       	subi	r28, 0xA9	; 169
    1630:	d0 40       	sbci	r29, 0x00	; 0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	fe 01       	movw	r30, r28
    163e:	e7 55       	subi	r30, 0x57	; 87
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    164e:	fe 01       	movw	r30, r28
    1650:	eb 55       	subi	r30, 0x5B	; 91
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e4       	ldi	r27, 0x40	; 64
    165c:	80 83       	st	Z, r24
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	a2 83       	std	Z+2, r26	; 0x02
    1662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1664:	8e 01       	movw	r16, r28
    1666:	0f 55       	subi	r16, 0x5F	; 95
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	eb 55       	subi	r30, 0x5B	; 91
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	2b ea       	ldi	r18, 0xAB	; 171
    167a:	3a ea       	ldi	r19, 0xAA	; 170
    167c:	4a ea       	ldi	r20, 0xAA	; 170
    167e:	50 e4       	ldi	r21, 0x40	; 64
    1680:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	f8 01       	movw	r30, r16
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1692:	fe 01       	movw	r30, r28
    1694:	ef 55       	subi	r30, 0x5F	; 95
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	34 f4       	brge	.+12     	; 0x16bc <LCD_SendCommand+0x9a>
		__ticks = 1;
    16b0:	fe 01       	movw	r30, r28
    16b2:	e0 56       	subi	r30, 0x60	; 96
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 83       	st	Z, r24
    16ba:	e0 c0       	rjmp	.+448    	; 0x187c <LCD_SendCommand+0x25a>
	else if (__tmp > 255)
    16bc:	fe 01       	movw	r30, r28
    16be:	ef 55       	subi	r30, 0x5F	; 95
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4f e7       	ldi	r20, 0x7F	; 127
    16d0:	53 e4       	ldi	r21, 0x43	; 67
    16d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d6:	18 16       	cp	r1, r24
    16d8:	0c f0       	brlt	.+2      	; 0x16dc <LCD_SendCommand+0xba>
    16da:	c0 c0       	rjmp	.+384    	; 0x185c <LCD_SendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    16dc:	fe 01       	movw	r30, r28
    16de:	eb 55       	subi	r30, 0x5B	; 91
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a e7       	ldi	r20, 0x7A	; 122
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	fe 01       	movw	r30, r28
    16fc:	e4 56       	subi	r30, 0x64	; 100
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 83       	st	Z, r24
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	8e 01       	movw	r16, r28
    170a:	08 56       	subi	r16, 0x68	; 104
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e4 56       	subi	r30, 0x64	; 100
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a e7       	ldi	r20, 0x7A	; 122
    1722:	55 e4       	ldi	r21, 0x45	; 69
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	a2 83       	std	Z+2, r26	; 0x02
    1734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1736:	fe 01       	movw	r30, r28
    1738:	e8 56       	subi	r30, 0x68	; 104
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	44 f4       	brge	.+16     	; 0x1764 <LCD_SendCommand+0x142>
		__ticks = 1;
    1754:	fe 01       	movw	r30, r28
    1756:	ea 56       	subi	r30, 0x6A	; 106
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	64 c0       	rjmp	.+200    	; 0x182c <LCD_SendCommand+0x20a>
	else if (__tmp > 65535)
    1764:	fe 01       	movw	r30, r28
    1766:	e8 56       	subi	r30, 0x68	; 104
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	0c f0       	brlt	.+2      	; 0x1784 <LCD_SendCommand+0x162>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <LCD_SendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	fe 01       	movw	r30, r28
    1786:	e4 56       	subi	r30, 0x64	; 100
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8e 01       	movw	r16, r28
    17a4:	0a 56       	subi	r16, 0x6A	; 106
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <LCD_SendCommand+0x1d8>
    17bc:	fe 01       	movw	r30, r28
    17be:	ec 56       	subi	r30, 0x6C	; 108
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 e9       	ldi	r24, 0x90	; 144
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	fe 01       	movw	r30, r28
    17cc:	ec 56       	subi	r30, 0x6C	; 108
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <LCD_SendCommand+0x1b2>
    17d8:	fe 01       	movw	r30, r28
    17da:	ec 56       	subi	r30, 0x6C	; 108
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	de 01       	movw	r26, r28
    17e4:	aa 56       	subi	r26, 0x6A	; 106
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	ea 56       	subi	r30, 0x6A	; 106
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	9c 93       	st	X, r25
    17f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	fe 01       	movw	r30, r28
    17fc:	ea 56       	subi	r30, 0x6A	; 106
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	d1 f6       	brne	.-76     	; 0x17bc <LCD_SendCommand+0x19a>
    1808:	4b c0       	rjmp	.+150    	; 0x18a0 <LCD_SendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	8e 01       	movw	r16, r28
    180c:	0a 56       	subi	r16, 0x6A	; 106
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e8 56       	subi	r30, 0x68	; 104
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	de 01       	movw	r26, r28
    182e:	ae 56       	subi	r26, 0x6E	; 110
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	ea 56       	subi	r30, 0x6A	; 106
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
    1842:	fe 01       	movw	r30, r28
    1844:	ee 56       	subi	r30, 0x6E	; 110
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_SendCommand+0x22a>
    1850:	fe 01       	movw	r30, r28
    1852:	ee 56       	subi	r30, 0x6E	; 110
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	22 c0       	rjmp	.+68     	; 0x18a0 <LCD_SendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    185c:	8e 01       	movw	r16, r28
    185e:	00 56       	subi	r16, 0x60	; 96
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	fe 01       	movw	r30, r28
    1864:	ef 55       	subi	r30, 0x5F	; 95
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	f8 01       	movw	r30, r16
    187a:	80 83       	st	Z, r24
    187c:	de 01       	movw	r26, r28
    187e:	af 56       	subi	r26, 0x6F	; 111
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e0 56       	subi	r30, 0x60	; 96
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    188c:	fe 01       	movw	r30, r28
    188e:	ef 56       	subi	r30, 0x6F	; 111
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	8a 95       	dec	r24
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_SendCommand+0x272>
    1898:	fe 01       	movw	r30, r28
    189a:	ef 56       	subi	r30, 0x6F	; 111
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	62 e0       	ldi	r22, 0x02	; 2
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e3 57       	subi	r30, 0x73	; 115
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e0       	ldi	r26, 0x00	; 0
    18b6:	b0 e4       	ldi	r27, 0x40	; 64
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18c0:	8e 01       	movw	r16, r28
    18c2:	07 57       	subi	r16, 0x77	; 119
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	fe 01       	movw	r30, r28
    18c8:	e3 57       	subi	r30, 0x73	; 115
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	2b ea       	ldi	r18, 0xAB	; 171
    18d6:	3a ea       	ldi	r19, 0xAA	; 170
    18d8:	4a ea       	ldi	r20, 0xAA	; 170
    18da:	50 e4       	ldi	r21, 0x40	; 64
    18dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ee:	fe 01       	movw	r30, r28
    18f0:	e7 57       	subi	r30, 0x77	; 119
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	34 f4       	brge	.+12     	; 0x1918 <LCD_SendCommand+0x2f6>
		__ticks = 1;
    190c:	fe 01       	movw	r30, r28
    190e:	e8 57       	subi	r30, 0x78	; 120
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 83       	st	Z, r24
    1916:	e0 c0       	rjmp	.+448    	; 0x1ad8 <LCD_SendCommand+0x4b6>
	else if (__tmp > 255)
    1918:	fe 01       	movw	r30, r28
    191a:	e7 57       	subi	r30, 0x77	; 119
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	53 e4       	ldi	r21, 0x43	; 67
    192e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	0c f0       	brlt	.+2      	; 0x1938 <LCD_SendCommand+0x316>
    1936:	c0 c0       	rjmp	.+384    	; 0x1ab8 <LCD_SendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1938:	fe 01       	movw	r30, r28
    193a:	e3 57       	subi	r30, 0x73	; 115
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	54 e4       	ldi	r21, 0x44	; 68
    194e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	fe 01       	movw	r30, r28
    1958:	ec 57       	subi	r30, 0x7C	; 124
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 83       	st	Z, r24
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	a2 83       	std	Z+2, r26	; 0x02
    1962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	8e 01       	movw	r16, r28
    1966:	00 58       	subi	r16, 0x80	; 128
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	fe 01       	movw	r30, r28
    196c:	ec 57       	subi	r30, 0x7C	; 124
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a e7       	ldi	r20, 0x7A	; 122
    197e:	55 e4       	ldi	r21, 0x45	; 69
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	80 83       	st	Z, r24
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	a2 83       	std	Z+2, r26	; 0x02
    1990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1992:	fe 01       	movw	r30, r28
    1994:	e0 58       	subi	r30, 0x80	; 128
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	44 f4       	brge	.+16     	; 0x19c0 <LCD_SendCommand+0x39e>
		__ticks = 1;
    19b0:	fe 01       	movw	r30, r28
    19b2:	e2 58       	subi	r30, 0x82	; 130
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    19be:	64 c0       	rjmp	.+200    	; 0x1a88 <LCD_SendCommand+0x466>
	else if (__tmp > 65535)
    19c0:	fe 01       	movw	r30, r28
    19c2:	e0 58       	subi	r30, 0x80	; 128
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	0c f0       	brlt	.+2      	; 0x19e0 <LCD_SendCommand+0x3be>
    19de:	43 c0       	rjmp	.+134    	; 0x1a66 <LCD_SendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	fe 01       	movw	r30, r28
    19e2:	ec 57       	subi	r30, 0x7C	; 124
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8e 01       	movw	r16, r28
    1a00:	02 58       	subi	r16, 0x82	; 130
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	1f c0       	rjmp	.+62     	; 0x1a56 <LCD_SendCommand+0x434>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e4 58       	subi	r30, 0x84	; 132
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 e9       	ldi	r24, 0x90	; 144
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a26:	fe 01       	movw	r30, r28
    1a28:	e4 58       	subi	r30, 0x84	; 132
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_SendCommand+0x40e>
    1a34:	fe 01       	movw	r30, r28
    1a36:	e4 58       	subi	r30, 0x84	; 132
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3e:	de 01       	movw	r26, r28
    1a40:	a2 58       	subi	r26, 0x82	; 130
    1a42:	bf 4f       	sbci	r27, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e2 58       	subi	r30, 0x82	; 130
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	11 96       	adiw	r26, 0x01	; 1
    1a52:	9c 93       	st	X, r25
    1a54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a56:	fe 01       	movw	r30, r28
    1a58:	e2 58       	subi	r30, 0x82	; 130
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	d1 f6       	brne	.-76     	; 0x1a18 <LCD_SendCommand+0x3f6>
    1a64:	4b c0       	rjmp	.+150    	; 0x1afc <LCD_SendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	8e 01       	movw	r16, r28
    1a68:	02 58       	subi	r16, 0x82	; 130
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e0 58       	subi	r30, 0x80	; 128
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	de 01       	movw	r26, r28
    1a8a:	a6 58       	subi	r26, 0x86	; 134
    1a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e2 58       	subi	r30, 0x82	; 130
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	9c 93       	st	X, r25
    1a9c:	8e 93       	st	-X, r24
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e6 58       	subi	r30, 0x86	; 134
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_SendCommand+0x486>
    1aac:	fe 01       	movw	r30, r28
    1aae:	e6 58       	subi	r30, 0x86	; 134
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    1ab6:	22 c0       	rjmp	.+68     	; 0x1afc <LCD_SendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ab8:	8e 01       	movw	r16, r28
    1aba:	08 57       	subi	r16, 0x78	; 120
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e7 57       	subi	r30, 0x77	; 119
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	80 83       	st	Z, r24
    1ad8:	de 01       	movw	r26, r28
    1ada:	a7 58       	subi	r26, 0x87	; 135
    1adc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e8 57       	subi	r30, 0x78	; 120
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e7 58       	subi	r30, 0x87	; 135
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	80 81       	ld	r24, Z
    1af0:	8a 95       	dec	r24
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_SendCommand+0x4ce>
    1af4:	fe 01       	movw	r30, r28
    1af6:	e7 58       	subi	r30, 0x87	; 135
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 83       	st	Z, r24
        GPIO_writePort(LCD_DATA_PORT_ID, command);
        _delay_us(2);
    #elif (LCD_BIT_MODE == 4)

        /* Send high bit command */
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID, GET_BIT(command, 4));
    1afc:	fe 01       	movw	r30, r28
    1afe:	e7 55       	subi	r30, 0x57	; 87
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	80 71       	andi	r24, 0x10	; 16
    1b0a:	90 70       	andi	r25, 0x00	; 0
    1b0c:	95 95       	asr	r25
    1b0e:	87 95       	ror	r24
    1b10:	95 95       	asr	r25
    1b12:	87 95       	ror	r24
    1b14:	95 95       	asr	r25
    1b16:	87 95       	ror	r24
    1b18:	95 95       	asr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	63 e0       	ldi	r22, 0x03	; 3
    1b22:	49 2f       	mov	r20, r25
    1b24:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 1, GET_BIT(command, 5));
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e7 55       	subi	r30, 0x57	; 87
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	80 72       	andi	r24, 0x20	; 32
    1b36:	90 70       	andi	r25, 0x00	; 0
    1b38:	95 95       	asr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	95 95       	asr	r25
    1b3e:	87 95       	ror	r24
    1b40:	95 95       	asr	r25
    1b42:	87 95       	ror	r24
    1b44:	95 95       	asr	r25
    1b46:	87 95       	ror	r24
    1b48:	95 95       	asr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	64 e0       	ldi	r22, 0x04	; 4
    1b52:	49 2f       	mov	r20, r25
    1b54:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 2, GET_BIT(command, 6));
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e7 55       	subi	r30, 0x57	; 87
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	80 74       	andi	r24, 0x40	; 64
    1b66:	90 70       	andi	r25, 0x00	; 0
    1b68:	08 2e       	mov	r0, r24
    1b6a:	89 2f       	mov	r24, r25
    1b6c:	00 0c       	add	r0, r0
    1b6e:	88 1f       	adc	r24, r24
    1b70:	99 0b       	sbc	r25, r25
    1b72:	00 0c       	add	r0, r0
    1b74:	88 1f       	adc	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	98 2f       	mov	r25, r24
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	65 e0       	ldi	r22, 0x05	; 5
    1b7e:	49 2f       	mov	r20, r25
    1b80:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 3, GET_BIT(command, 7));
    1b84:	fe 01       	movw	r30, r28
    1b86:	e7 55       	subi	r30, 0x57	; 87
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	99 27       	eor	r25, r25
    1b92:	99 1f       	adc	r25, r25
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	66 e0       	ldi	r22, 0x06	; 6
    1b98:	49 2f       	mov	r20, r25
    1b9a:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	eb 58       	subi	r30, 0x8B	; 139
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e0       	ldi	r26, 0x00	; 0
    1baa:	b0 e4       	ldi	r27, 0x40	; 64
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bb4:	8e 01       	movw	r16, r28
    1bb6:	0f 58       	subi	r16, 0x8F	; 143
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	fe 01       	movw	r30, r28
    1bbc:	eb 58       	subi	r30, 0x8B	; 139
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	2b ea       	ldi	r18, 0xAB	; 171
    1bca:	3a ea       	ldi	r19, 0xAA	; 170
    1bcc:	4a ea       	ldi	r20, 0xAA	; 170
    1bce:	50 e4       	ldi	r21, 0x40	; 64
    1bd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be2:	fe 01       	movw	r30, r28
    1be4:	ef 58       	subi	r30, 0x8F	; 143
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	34 f4       	brge	.+12     	; 0x1c0c <LCD_SendCommand+0x5ea>
		__ticks = 1;
    1c00:	fe 01       	movw	r30, r28
    1c02:	e0 59       	subi	r30, 0x90	; 144
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 83       	st	Z, r24
    1c0a:	e0 c0       	rjmp	.+448    	; 0x1dcc <LCD_SendCommand+0x7aa>
	else if (__tmp > 255)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ef 58       	subi	r30, 0x8F	; 143
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	53 e4       	ldi	r21, 0x43	; 67
    1c22:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	0c f0       	brlt	.+2      	; 0x1c2c <LCD_SendCommand+0x60a>
    1c2a:	c0 c0       	rjmp	.+384    	; 0x1dac <LCD_SendCommand+0x78a>
	{
		_delay_ms(__us / 1000.0);
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	eb 58       	subi	r30, 0x8B	; 139
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a e7       	ldi	r20, 0x7A	; 122
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e4 59       	subi	r30, 0x94	; 148
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 83       	st	Z, r24
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	a2 83       	std	Z+2, r26	; 0x02
    1c56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	08 59       	subi	r16, 0x98	; 152
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e4 59       	subi	r30, 0x94	; 148
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a e7       	ldi	r20, 0x7A	; 122
    1c72:	55 e4       	ldi	r21, 0x45	; 69
    1c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 83       	st	Z, r24
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	a2 83       	std	Z+2, r26	; 0x02
    1c84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 59       	subi	r30, 0x98	; 152
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	44 f4       	brge	.+16     	; 0x1cb4 <LCD_SendCommand+0x692>
		__ticks = 1;
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ea 59       	subi	r30, 0x9A	; 154
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
    1cb2:	64 c0       	rjmp	.+200    	; 0x1d7c <LCD_SendCommand+0x75a>
	else if (__tmp > 65535)
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e8 59       	subi	r30, 0x98	; 152
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	0c f0       	brlt	.+2      	; 0x1cd4 <LCD_SendCommand+0x6b2>
    1cd2:	43 c0       	rjmp	.+134    	; 0x1d5a <LCD_SendCommand+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e4 59       	subi	r30, 0x94	; 148
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	0a 59       	subi	r16, 0x9A	; 154
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	f8 01       	movw	r30, r16
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
    1d0a:	1f c0       	rjmp	.+62     	; 0x1d4a <LCD_SendCommand+0x728>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ec 59       	subi	r30, 0x9C	; 156
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 e9       	ldi	r24, 0x90	; 144
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ec 59       	subi	r30, 0x9C	; 156
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_SendCommand+0x702>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ec 59       	subi	r30, 0x9C	; 156
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	de 01       	movw	r26, r28
    1d34:	aa 59       	subi	r26, 0x9A	; 154
    1d36:	bf 4f       	sbci	r27, 0xFF	; 255
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ea 59       	subi	r30, 0x9A	; 154
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 81       	ld	r24, Z
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 93       	st	X, r25
    1d48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ea 59       	subi	r30, 0x9A	; 154
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	d1 f6       	brne	.-76     	; 0x1d0c <LCD_SendCommand+0x6ea>
    1d58:	4b c0       	rjmp	.+150    	; 0x1df0 <LCD_SendCommand+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	8e 01       	movw	r16, r28
    1d5c:	0a 59       	subi	r16, 0x9A	; 154
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e8 59       	subi	r30, 0x98	; 152
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	f8 01       	movw	r30, r16
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	de 01       	movw	r26, r28
    1d7e:	ae 59       	subi	r26, 0x9E	; 158
    1d80:	bf 4f       	sbci	r27, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	ea 59       	subi	r30, 0x9A	; 154
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	11 96       	adiw	r26, 0x01	; 1
    1d8e:	9c 93       	st	X, r25
    1d90:	8e 93       	st	-X, r24
    1d92:	fe 01       	movw	r30, r28
    1d94:	ee 59       	subi	r30, 0x9E	; 158
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 81       	ld	r24, Z
    1d9a:	91 81       	ldd	r25, Z+1	; 0x01
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_SendCommand+0x77a>
    1da0:	fe 01       	movw	r30, r28
    1da2:	ee 59       	subi	r30, 0x9E	; 158
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	22 c0       	rjmp	.+68     	; 0x1df0 <LCD_SendCommand+0x7ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dac:	8e 01       	movw	r16, r28
    1dae:	00 59       	subi	r16, 0x90	; 144
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 58       	subi	r30, 0x8F	; 143
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	f8 01       	movw	r30, r16
    1dca:	80 83       	st	Z, r24
    1dcc:	de 01       	movw	r26, r28
    1dce:	af 59       	subi	r26, 0x9F	; 159
    1dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e0 59       	subi	r30, 0x90	; 144
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ef 59       	subi	r30, 0x9F	; 159
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	8a 95       	dec	r24
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_SendCommand+0x7c2>
    1de8:	fe 01       	movw	r30, r28
    1dea:	ef 59       	subi	r30, 0x9F	; 159
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 83       	st	Z, r24

        /* delay */
        _delay_us(2);

        /* Disable */
        GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e3 5a       	subi	r30, 0xA3	; 163
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e4       	ldi	r27, 0x40	; 64
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e10:	8e 01       	movw	r16, r28
    1e12:	07 5a       	subi	r16, 0xA7	; 167
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e3 5a       	subi	r30, 0xA3	; 163
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	2b ea       	ldi	r18, 0xAB	; 171
    1e26:	3a ea       	ldi	r19, 0xAA	; 170
    1e28:	4a ea       	ldi	r20, 0xAA	; 170
    1e2a:	50 e4       	ldi	r21, 0x40	; 64
    1e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	f8 01       	movw	r30, r16
    1e36:	80 83       	st	Z, r24
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	a2 83       	std	Z+2, r26	; 0x02
    1e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e7 5a       	subi	r30, 0xA7	; 167
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	34 f4       	brge	.+12     	; 0x1e68 <LCD_SendCommand+0x846>
		__ticks = 1;
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e8 5a       	subi	r30, 0xA8	; 168
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 83       	st	Z, r24
    1e66:	e0 c0       	rjmp	.+448    	; 0x2028 <LCD_SendCommand+0xa06>
	else if (__tmp > 255)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e7 5a       	subi	r30, 0xA7	; 167
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	53 e4       	ldi	r21, 0x43	; 67
    1e7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <LCD_SendCommand+0x866>
    1e86:	c0 c0       	rjmp	.+384    	; 0x2008 <LCD_SendCommand+0x9e6>
	{
		_delay_ms(__us / 1000.0);
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e3 5a       	subi	r30, 0xA3	; 163
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a e7       	ldi	r20, 0x7A	; 122
    1e9c:	54 e4       	ldi	r21, 0x44	; 68
    1e9e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ec 5a       	subi	r30, 0xAC	; 172
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 83       	st	Z, r24
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	a2 83       	std	Z+2, r26	; 0x02
    1eb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	8e 01       	movw	r16, r28
    1eb6:	00 5b       	subi	r16, 0xB0	; 176
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ec 5a       	subi	r30, 0xAC	; 172
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a e7       	ldi	r20, 0x7A	; 122
    1ece:	55 e4       	ldi	r21, 0x45	; 69
    1ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	f8 01       	movw	r30, r16
    1eda:	80 83       	st	Z, r24
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	a2 83       	std	Z+2, r26	; 0x02
    1ee0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e0 5b       	subi	r30, 0xB0	; 176
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	44 f4       	brge	.+16     	; 0x1f10 <LCD_SendCommand+0x8ee>
		__ticks = 1;
    1f00:	fe 01       	movw	r30, r28
    1f02:	e2 5b       	subi	r30, 0xB2	; 178
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	64 c0       	rjmp	.+200    	; 0x1fd8 <LCD_SendCommand+0x9b6>
	else if (__tmp > 65535)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e0 5b       	subi	r30, 0xB0	; 176
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	0c f0       	brlt	.+2      	; 0x1f30 <LCD_SendCommand+0x90e>
    1f2e:	43 c0       	rjmp	.+134    	; 0x1fb6 <LCD_SendCommand+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	fe 01       	movw	r30, r28
    1f32:	ec 5a       	subi	r30, 0xAC	; 172
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8e 01       	movw	r16, r28
    1f50:	02 5b       	subi	r16, 0xB2	; 178
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	f8 01       	movw	r30, r16
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	1f c0       	rjmp	.+62     	; 0x1fa6 <LCD_SendCommand+0x984>
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e4 5b       	subi	r30, 0xB4	; 180
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 e9       	ldi	r24, 0x90	; 144
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f76:	fe 01       	movw	r30, r28
    1f78:	e4 5b       	subi	r30, 0xB4	; 180
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	91 81       	ldd	r25, Z+1	; 0x01
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_SendCommand+0x95e>
    1f84:	fe 01       	movw	r30, r28
    1f86:	e4 5b       	subi	r30, 0xB4	; 180
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	de 01       	movw	r26, r28
    1f90:	a2 5b       	subi	r26, 0xB2	; 178
    1f92:	bf 4f       	sbci	r27, 0xFF	; 255
    1f94:	fe 01       	movw	r30, r28
    1f96:	e2 5b       	subi	r30, 0xB2	; 178
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	11 96       	adiw	r26, 0x01	; 1
    1fa2:	9c 93       	st	X, r25
    1fa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e2 5b       	subi	r30, 0xB2	; 178
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	d1 f6       	brne	.-76     	; 0x1f68 <LCD_SendCommand+0x946>
    1fb4:	4b c0       	rjmp	.+150    	; 0x204c <LCD_SendCommand+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	02 5b       	subi	r16, 0xB2	; 178
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e0 5b       	subi	r30, 0xB0	; 176
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	de 01       	movw	r26, r28
    1fda:	a6 5b       	subi	r26, 0xB6	; 182
    1fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e2 5b       	subi	r30, 0xB2	; 178
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	11 96       	adiw	r26, 0x01	; 1
    1fea:	9c 93       	st	X, r25
    1fec:	8e 93       	st	-X, r24
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e6 5b       	subi	r30, 0xB6	; 182
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_SendCommand+0x9d6>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e6 5b       	subi	r30, 0xB6	; 182
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	22 c0       	rjmp	.+68     	; 0x204c <LCD_SendCommand+0xa2a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2008:	8e 01       	movw	r16, r28
    200a:	08 5a       	subi	r16, 0xA8	; 168
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	e7 5a       	subi	r30, 0xA7	; 167
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	f8 01       	movw	r30, r16
    2026:	80 83       	st	Z, r24
    2028:	de 01       	movw	r26, r28
    202a:	a7 5b       	subi	r26, 0xB7	; 183
    202c:	bf 4f       	sbci	r27, 0xFF	; 255
    202e:	fe 01       	movw	r30, r28
    2030:	e8 5a       	subi	r30, 0xA8	; 168
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2038:	fe 01       	movw	r30, r28
    203a:	e7 5b       	subi	r30, 0xB7	; 183
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	8a 95       	dec	r24
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_SendCommand+0xa1e>
    2044:	fe 01       	movw	r30, r28
    2046:	e7 5b       	subi	r30, 0xB7	; 183
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 83       	st	Z, r24
        _delay_us(2);

        /* enable */
        GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	62 e0       	ldi	r22, 0x02	; 2
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2056:	fe 01       	movw	r30, r28
    2058:	eb 5b       	subi	r30, 0xBB	; 187
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e4       	ldi	r27, 0x40	; 64
    2064:	80 83       	st	Z, r24
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	a2 83       	std	Z+2, r26	; 0x02
    206a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    206c:	8e 01       	movw	r16, r28
    206e:	0f 5b       	subi	r16, 0xBF	; 191
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	fe 01       	movw	r30, r28
    2074:	eb 5b       	subi	r30, 0xBB	; 187
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	2b ea       	ldi	r18, 0xAB	; 171
    2082:	3a ea       	ldi	r19, 0xAA	; 170
    2084:	4a ea       	ldi	r20, 0xAA	; 170
    2086:	50 e4       	ldi	r21, 0x40	; 64
    2088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	f8 01       	movw	r30, r16
    2092:	80 83       	st	Z, r24
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	a2 83       	std	Z+2, r26	; 0x02
    2098:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    209a:	fe 01       	movw	r30, r28
    209c:	ef 5b       	subi	r30, 0xBF	; 191
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	34 f4       	brge	.+12     	; 0x20c4 <LCD_SendCommand+0xaa2>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	fe 01       	movw	r30, r28
    20bc:	e0 5c       	subi	r30, 0xC0	; 192
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 83       	st	Z, r24
    20c2:	9d c0       	rjmp	.+314    	; 0x21fe <LCD_SendCommand+0xbdc>
	else if (__tmp > 255)
    20c4:	fe 01       	movw	r30, r28
    20c6:	ef 5b       	subi	r30, 0xBF	; 191
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	60 81       	ld	r22, Z
    20cc:	71 81       	ldd	r23, Z+1	; 0x01
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	53 e4       	ldi	r21, 0x43	; 67
    20da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	0c f0       	brlt	.+2      	; 0x20e4 <LCD_SendCommand+0xac2>
    20e2:	7e c0       	rjmp	.+252    	; 0x21e0 <LCD_SendCommand+0xbbe>
	{
		_delay_ms(__us / 1000.0);
    20e4:	fe 01       	movw	r30, r28
    20e6:	eb 5b       	subi	r30, 0xBB	; 187
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8c af       	std	Y+60, r24	; 0x3c
    2104:	9d af       	std	Y+61, r25	; 0x3d
    2106:	ae af       	std	Y+62, r26	; 0x3e
    2108:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	6c ad       	ldd	r22, Y+60	; 0x3c
    210c:	7d ad       	ldd	r23, Y+61	; 0x3d
    210e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2110:	9f ad       	ldd	r25, Y+63	; 0x3f
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a e7       	ldi	r20, 0x7A	; 122
    2118:	55 e4       	ldi	r21, 0x45	; 69
    211a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	88 af       	std	Y+56, r24	; 0x38
    2124:	99 af       	std	Y+57, r25	; 0x39
    2126:	aa af       	std	Y+58, r26	; 0x3a
    2128:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    212a:	68 ad       	ldd	r22, Y+56	; 0x38
    212c:	79 ad       	ldd	r23, Y+57	; 0x39
    212e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2130:	9b ad       	ldd	r25, Y+59	; 0x3b
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <LCD_SendCommand+0xb2a>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9f ab       	std	Y+55, r25	; 0x37
    2148:	8e ab       	std	Y+54, r24	; 0x36
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <LCD_SendCommand+0xba8>
	else if (__tmp > 65535)
    214c:	68 ad       	ldd	r22, Y+56	; 0x38
    214e:	79 ad       	ldd	r23, Y+57	; 0x39
    2150:	8a ad       	ldd	r24, Y+58	; 0x3a
    2152:	9b ad       	ldd	r25, Y+59	; 0x3b
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <LCD_SendCommand+0xb94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	6c ad       	ldd	r22, Y+60	; 0x3c
    2166:	7d ad       	ldd	r23, Y+61	; 0x3d
    2168:	8e ad       	ldd	r24, Y+62	; 0x3e
    216a:	9f ad       	ldd	r25, Y+63	; 0x3f
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9f ab       	std	Y+55, r25	; 0x37
    218a:	8e ab       	std	Y+54, r24	; 0x36
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <LCD_SendCommand+0xb8a>
    218e:	80 e9       	ldi	r24, 0x90	; 144
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	9d ab       	std	Y+53, r25	; 0x35
    2194:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2196:	8c a9       	ldd	r24, Y+52	; 0x34
    2198:	9d a9       	ldd	r25, Y+53	; 0x35
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_SendCommand+0xb78>
    219e:	9d ab       	std	Y+53, r25	; 0x35
    21a0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	8e a9       	ldd	r24, Y+54	; 0x36
    21a4:	9f a9       	ldd	r25, Y+55	; 0x37
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9f ab       	std	Y+55, r25	; 0x37
    21aa:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	8e a9       	ldd	r24, Y+54	; 0x36
    21ae:	9f a9       	ldd	r25, Y+55	; 0x37
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <LCD_SendCommand+0xb6c>
    21b4:	2d c0       	rjmp	.+90     	; 0x2210 <LCD_SendCommand+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	68 ad       	ldd	r22, Y+56	; 0x38
    21b8:	79 ad       	ldd	r23, Y+57	; 0x39
    21ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    21bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    21be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9f ab       	std	Y+55, r25	; 0x37
    21c8:	8e ab       	std	Y+54, r24	; 0x36
    21ca:	8e a9       	ldd	r24, Y+54	; 0x36
    21cc:	9f a9       	ldd	r25, Y+55	; 0x37
    21ce:	9b ab       	std	Y+51, r25	; 0x33
    21d0:	8a ab       	std	Y+50, r24	; 0x32
    21d2:	8a a9       	ldd	r24, Y+50	; 0x32
    21d4:	9b a9       	ldd	r25, Y+51	; 0x33
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_SendCommand+0xbb4>
    21da:	9b ab       	std	Y+51, r25	; 0x33
    21dc:	8a ab       	std	Y+50, r24	; 0x32
    21de:	18 c0       	rjmp	.+48     	; 0x2210 <LCD_SendCommand+0xbee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e0:	fe 01       	movw	r30, r28
    21e2:	ef 5b       	subi	r30, 0xBF	; 191
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	fe 01       	movw	r30, r28
    21f8:	e0 5c       	subi	r30, 0xC0	; 192
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 83       	st	Z, r24
    21fe:	fe 01       	movw	r30, r28
    2200:	e0 5c       	subi	r30, 0xC0	; 192
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2208:	89 a9       	ldd	r24, Y+49	; 0x31
    220a:	8a 95       	dec	r24
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_SendCommand+0xbe8>
    220e:	89 ab       	std	Y+49, r24	; 0x31
        _delay_us(2);

        /* send low bit */
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID, GET_BIT(command, 0));
    2210:	fe 01       	movw	r30, r28
    2212:	e7 55       	subi	r30, 0x57	; 87
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	98 2f       	mov	r25, r24
    221a:	91 70       	andi	r25, 0x01	; 1
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	63 e0       	ldi	r22, 0x03	; 3
    2220:	49 2f       	mov	r20, r25
    2222:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 1, GET_BIT(command, 1));
    2226:	fe 01       	movw	r30, r28
    2228:	e7 55       	subi	r30, 0x57	; 87
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	82 70       	andi	r24, 0x02	; 2
    2234:	90 70       	andi	r25, 0x00	; 0
    2236:	95 95       	asr	r25
    2238:	87 95       	ror	r24
    223a:	98 2f       	mov	r25, r24
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	64 e0       	ldi	r22, 0x04	; 4
    2240:	49 2f       	mov	r20, r25
    2242:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 2, GET_BIT(command, 2));
    2246:	fe 01       	movw	r30, r28
    2248:	e7 55       	subi	r30, 0x57	; 87
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	84 70       	andi	r24, 0x04	; 4
    2254:	90 70       	andi	r25, 0x00	; 0
    2256:	95 95       	asr	r25
    2258:	87 95       	ror	r24
    225a:	95 95       	asr	r25
    225c:	87 95       	ror	r24
    225e:	98 2f       	mov	r25, r24
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	65 e0       	ldi	r22, 0x05	; 5
    2264:	49 2f       	mov	r20, r25
    2266:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 3, GET_BIT(command, 3));
    226a:	fe 01       	movw	r30, r28
    226c:	e7 55       	subi	r30, 0x57	; 87
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	88 70       	andi	r24, 0x08	; 8
    2278:	90 70       	andi	r25, 0x00	; 0
    227a:	95 95       	asr	r25
    227c:	87 95       	ror	r24
    227e:	95 95       	asr	r25
    2280:	87 95       	ror	r24
    2282:	95 95       	asr	r25
    2284:	87 95       	ror	r24
    2286:	98 2f       	mov	r25, r24
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	66 e0       	ldi	r22, 0x06	; 6
    228c:	49 2f       	mov	r20, r25
    228e:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e0       	ldi	r26, 0x00	; 0
    2298:	b0 e4       	ldi	r27, 0x40	; 64
    229a:	8d a7       	std	Y+45, r24	; 0x2d
    229c:	9e a7       	std	Y+46, r25	; 0x2e
    229e:	af a7       	std	Y+47, r26	; 0x2f
    22a0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a8:	98 a9       	ldd	r25, Y+48	; 0x30
    22aa:	2b ea       	ldi	r18, 0xAB	; 171
    22ac:	3a ea       	ldi	r19, 0xAA	; 170
    22ae:	4a ea       	ldi	r20, 0xAA	; 170
    22b0:	50 e4       	ldi	r21, 0x40	; 64
    22b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	89 a7       	std	Y+41, r24	; 0x29
    22bc:	9a a7       	std	Y+42, r25	; 0x2a
    22be:	ab a7       	std	Y+43, r26	; 0x2b
    22c0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22c2:	69 a5       	ldd	r22, Y+41	; 0x29
    22c4:	7a a5       	ldd	r23, Y+42	; 0x2a
    22c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	1c f4       	brge	.+6      	; 0x22e0 <LCD_SendCommand+0xcbe>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	88 a7       	std	Y+40, r24	; 0x28
    22de:	91 c0       	rjmp	.+290    	; 0x2402 <LCD_SendCommand+0xde0>
	else if (__tmp > 255)
    22e0:	69 a5       	ldd	r22, Y+41	; 0x29
    22e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    22e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	53 e4       	ldi	r21, 0x43	; 67
    22f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	0c f0       	brlt	.+2      	; 0x22fa <LCD_SendCommand+0xcd8>
    22f8:	7b c0       	rjmp	.+246    	; 0x23f0 <LCD_SendCommand+0xdce>
	{
		_delay_ms(__us / 1000.0);
    22fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    22fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    22fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2300:	98 a9       	ldd	r25, Y+48	; 0x30
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4a e7       	ldi	r20, 0x7A	; 122
    2308:	54 e4       	ldi	r21, 0x44	; 68
    230a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8c a3       	std	Y+36, r24	; 0x24
    2314:	9d a3       	std	Y+37, r25	; 0x25
    2316:	ae a3       	std	Y+38, r26	; 0x26
    2318:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6c a1       	ldd	r22, Y+36	; 0x24
    231c:	7d a1       	ldd	r23, Y+37	; 0x25
    231e:	8e a1       	ldd	r24, Y+38	; 0x26
    2320:	9f a1       	ldd	r25, Y+39	; 0x27
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a e7       	ldi	r20, 0x7A	; 122
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	88 a3       	std	Y+32, r24	; 0x20
    2334:	99 a3       	std	Y+33, r25	; 0x21
    2336:	aa a3       	std	Y+34, r26	; 0x22
    2338:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    233a:	68 a1       	ldd	r22, Y+32	; 0x20
    233c:	79 a1       	ldd	r23, Y+33	; 0x21
    233e:	8a a1       	ldd	r24, Y+34	; 0x22
    2340:	9b a1       	ldd	r25, Y+35	; 0x23
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <LCD_SendCommand+0xd3a>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9f 8f       	std	Y+31, r25	; 0x1f
    2358:	8e 8f       	std	Y+30, r24	; 0x1e
    235a:	3f c0       	rjmp	.+126    	; 0x23da <LCD_SendCommand+0xdb8>
	else if (__tmp > 65535)
    235c:	68 a1       	ldd	r22, Y+32	; 0x20
    235e:	79 a1       	ldd	r23, Y+33	; 0x21
    2360:	8a a1       	ldd	r24, Y+34	; 0x22
    2362:	9b a1       	ldd	r25, Y+35	; 0x23
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <LCD_SendCommand+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6c a1       	ldd	r22, Y+36	; 0x24
    2376:	7d a1       	ldd	r23, Y+37	; 0x25
    2378:	8e a1       	ldd	r24, Y+38	; 0x26
    237a:	9f a1       	ldd	r25, Y+39	; 0x27
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9f 8f       	std	Y+31, r25	; 0x1f
    239a:	8e 8f       	std	Y+30, r24	; 0x1e
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_SendCommand+0xd9a>
    239e:	80 e9       	ldi	r24, 0x90	; 144
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	9d 8f       	std	Y+29, r25	; 0x1d
    23a4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_SendCommand+0xd88>
    23ae:	9d 8f       	std	Y+29, r25	; 0x1d
    23b0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9f 8f       	std	Y+31, r25	; 0x1f
    23ba:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_SendCommand+0xd7c>
    23c4:	24 c0       	rjmp	.+72     	; 0x240e <LCD_SendCommand+0xdec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	68 a1       	ldd	r22, Y+32	; 0x20
    23c8:	79 a1       	ldd	r23, Y+33	; 0x21
    23ca:	8a a1       	ldd	r24, Y+34	; 0x22
    23cc:	9b a1       	ldd	r25, Y+35	; 0x23
    23ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9f 8f       	std	Y+31, r25	; 0x1f
    23d8:	8e 8f       	std	Y+30, r24	; 0x1e
    23da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23de:	9b 8f       	std	Y+27, r25	; 0x1b
    23e0:	8a 8f       	std	Y+26, r24	; 0x1a
    23e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_SendCommand+0xdc4>
    23ea:	9b 8f       	std	Y+27, r25	; 0x1b
    23ec:	8a 8f       	std	Y+26, r24	; 0x1a
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_SendCommand+0xdec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23f0:	69 a5       	ldd	r22, Y+41	; 0x29
    23f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    23f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	88 a7       	std	Y+40, r24	; 0x28
    2402:	88 a5       	ldd	r24, Y+40	; 0x28
    2404:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2406:	89 8d       	ldd	r24, Y+25	; 0x19
    2408:	8a 95       	dec	r24
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_SendCommand+0xde6>
    240c:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	62 e0       	ldi	r22, 0x02	; 2
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e0       	ldi	r26, 0x00	; 0
    241e:	b0 e4       	ldi	r27, 0x40	; 64
    2420:	8d 8b       	std	Y+21, r24	; 0x15
    2422:	9e 8b       	std	Y+22, r25	; 0x16
    2424:	af 8b       	std	Y+23, r26	; 0x17
    2426:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2428:	6d 89       	ldd	r22, Y+21	; 0x15
    242a:	7e 89       	ldd	r23, Y+22	; 0x16
    242c:	8f 89       	ldd	r24, Y+23	; 0x17
    242e:	98 8d       	ldd	r25, Y+24	; 0x18
    2430:	2b ea       	ldi	r18, 0xAB	; 171
    2432:	3a ea       	ldi	r19, 0xAA	; 170
    2434:	4a ea       	ldi	r20, 0xAA	; 170
    2436:	50 e4       	ldi	r21, 0x40	; 64
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	89 8b       	std	Y+17, r24	; 0x11
    2442:	9a 8b       	std	Y+18, r25	; 0x12
    2444:	ab 8b       	std	Y+19, r26	; 0x13
    2446:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2448:	69 89       	ldd	r22, Y+17	; 0x11
    244a:	7a 89       	ldd	r23, Y+18	; 0x12
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	9c 89       	ldd	r25, Y+20	; 0x14
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	1c f4       	brge	.+6      	; 0x2466 <LCD_SendCommand+0xe44>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	88 8b       	std	Y+16, r24	; 0x10
    2464:	91 c0       	rjmp	.+290    	; 0x2588 <LCD_SendCommand+0xf66>
	else if (__tmp > 255)
    2466:	69 89       	ldd	r22, Y+17	; 0x11
    2468:	7a 89       	ldd	r23, Y+18	; 0x12
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	53 e4       	ldi	r21, 0x43	; 67
    2476:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	0c f0       	brlt	.+2      	; 0x2480 <LCD_SendCommand+0xe5e>
    247e:	7b c0       	rjmp	.+246    	; 0x2576 <LCD_SendCommand+0xf54>
	{
		_delay_ms(__us / 1000.0);
    2480:	6d 89       	ldd	r22, Y+21	; 0x15
    2482:	7e 89       	ldd	r23, Y+22	; 0x16
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	54 e4       	ldi	r21, 0x44	; 68
    2490:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8c 87       	std	Y+12, r24	; 0x0c
    249a:	9d 87       	std	Y+13, r25	; 0x0d
    249c:	ae 87       	std	Y+14, r26	; 0x0e
    249e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    24a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a e7       	ldi	r20, 0x7A	; 122
    24ae:	55 e4       	ldi	r21, 0x45	; 69
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	88 87       	std	Y+8, r24	; 0x08
    24ba:	99 87       	std	Y+9, r25	; 0x09
    24bc:	aa 87       	std	Y+10, r26	; 0x0a
    24be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24c0:	68 85       	ldd	r22, Y+8	; 0x08
    24c2:	79 85       	ldd	r23, Y+9	; 0x09
    24c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <LCD_SendCommand+0xec0>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9f 83       	std	Y+7, r25	; 0x07
    24de:	8e 83       	std	Y+6, r24	; 0x06
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <LCD_SendCommand+0xf3e>
	else if (__tmp > 65535)
    24e2:	68 85       	ldd	r22, Y+8	; 0x08
    24e4:	79 85       	ldd	r23, Y+9	; 0x09
    24e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <LCD_SendCommand+0xf2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    24fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    24fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2500:	9f 85       	ldd	r25, Y+15	; 0x0f
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9f 83       	std	Y+7, r25	; 0x07
    2520:	8e 83       	std	Y+6, r24	; 0x06
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <LCD_SendCommand+0xf20>
    2524:	80 e9       	ldi	r24, 0x90	; 144
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	9d 83       	std	Y+5, r25	; 0x05
    252a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252c:	8c 81       	ldd	r24, Y+4	; 0x04
    252e:	9d 81       	ldd	r25, Y+5	; 0x05
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_SendCommand+0xf0e>
    2534:	9d 83       	std	Y+5, r25	; 0x05
    2536:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8e 81       	ldd	r24, Y+6	; 0x06
    253a:	9f 81       	ldd	r25, Y+7	; 0x07
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9f 83       	std	Y+7, r25	; 0x07
    2540:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8e 81       	ldd	r24, Y+6	; 0x06
    2544:	9f 81       	ldd	r25, Y+7	; 0x07
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <LCD_SendCommand+0xf02>
    254a:	24 c0       	rjmp	.+72     	; 0x2594 <LCD_SendCommand+0xf72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	68 85       	ldd	r22, Y+8	; 0x08
    254e:	79 85       	ldd	r23, Y+9	; 0x09
    2550:	8a 85       	ldd	r24, Y+10	; 0x0a
    2552:	9b 85       	ldd	r25, Y+11	; 0x0b
    2554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9f 83       	std	Y+7, r25	; 0x07
    255e:	8e 83       	std	Y+6, r24	; 0x06
    2560:	8e 81       	ldd	r24, Y+6	; 0x06
    2562:	9f 81       	ldd	r25, Y+7	; 0x07
    2564:	9b 83       	std	Y+3, r25	; 0x03
    2566:	8a 83       	std	Y+2, r24	; 0x02
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_SendCommand+0xf4a>
    2570:	9b 83       	std	Y+3, r25	; 0x03
    2572:	8a 83       	std	Y+2, r24	; 0x02
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <LCD_SendCommand+0xf72>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2576:	69 89       	ldd	r22, Y+17	; 0x11
    2578:	7a 89       	ldd	r23, Y+18	; 0x12
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	88 8b       	std	Y+16, r24	; 0x10
    2588:	88 89       	ldd	r24, Y+16	; 0x10
    258a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	8a 95       	dec	r24
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_SendCommand+0xf6c>
    2592:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    2594:	c7 55       	subi	r28, 0x57	; 87
    2596:	df 4f       	sbci	r29, 0xFF	; 255
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	08 95       	ret

000025ac <LCD_displayCharacter>:

/*
 * Function to display a character on the LCD
 */
void LCD_displayCharacter(uint8 data)
{
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	c9 5a       	subi	r28, 0xA9	; 169
    25ba:	d0 40       	sbci	r29, 0x00	; 0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	fe 01       	movw	r30, r28
    25c8:	e7 55       	subi	r30, 0x57	; 87
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    25d8:	fe 01       	movw	r30, r28
    25da:	eb 55       	subi	r30, 0x5B	; 91
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b0 e4       	ldi	r27, 0x40	; 64
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ee:	8e 01       	movw	r16, r28
    25f0:	0f 55       	subi	r16, 0x5F	; 95
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	eb 55       	subi	r30, 0x5B	; 91
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	2b ea       	ldi	r18, 0xAB	; 171
    2604:	3a ea       	ldi	r19, 0xAA	; 170
    2606:	4a ea       	ldi	r20, 0xAA	; 170
    2608:	50 e4       	ldi	r21, 0x40	; 64
    260a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    261c:	fe 01       	movw	r30, r28
    261e:	ef 55       	subi	r30, 0x5F	; 95
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	34 f4       	brge	.+12     	; 0x2646 <LCD_displayCharacter+0x9a>
		__ticks = 1;
    263a:	fe 01       	movw	r30, r28
    263c:	e0 56       	subi	r30, 0x60	; 96
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	80 83       	st	Z, r24
    2644:	e0 c0       	rjmp	.+448    	; 0x2806 <LCD_displayCharacter+0x25a>
	else if (__tmp > 255)
    2646:	fe 01       	movw	r30, r28
    2648:	ef 55       	subi	r30, 0x5F	; 95
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4f e7       	ldi	r20, 0x7F	; 127
    265a:	53 e4       	ldi	r21, 0x43	; 67
    265c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2660:	18 16       	cp	r1, r24
    2662:	0c f0       	brlt	.+2      	; 0x2666 <LCD_displayCharacter+0xba>
    2664:	c0 c0       	rjmp	.+384    	; 0x27e6 <LCD_displayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    2666:	fe 01       	movw	r30, r28
    2668:	eb 55       	subi	r30, 0x5B	; 91
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	60 81       	ld	r22, Z
    266e:	71 81       	ldd	r23, Z+1	; 0x01
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	93 81       	ldd	r25, Z+3	; 0x03
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a e7       	ldi	r20, 0x7A	; 122
    267a:	54 e4       	ldi	r21, 0x44	; 68
    267c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	fe 01       	movw	r30, r28
    2686:	e4 56       	subi	r30, 0x64	; 100
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 83       	st	Z, r24
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	a2 83       	std	Z+2, r26	; 0x02
    2690:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2692:	8e 01       	movw	r16, r28
    2694:	08 56       	subi	r16, 0x68	; 104
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	fe 01       	movw	r30, r28
    269a:	e4 56       	subi	r30, 0x64	; 100
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a e7       	ldi	r20, 0x7A	; 122
    26ac:	55 e4       	ldi	r21, 0x45	; 69
    26ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	f8 01       	movw	r30, r16
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c0:	fe 01       	movw	r30, r28
    26c2:	e8 56       	subi	r30, 0x68	; 104
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	44 f4       	brge	.+16     	; 0x26ee <LCD_displayCharacter+0x142>
		__ticks = 1;
    26de:	fe 01       	movw	r30, r28
    26e0:	ea 56       	subi	r30, 0x6A	; 106
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	64 c0       	rjmp	.+200    	; 0x27b6 <LCD_displayCharacter+0x20a>
	else if (__tmp > 65535)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e8 56       	subi	r30, 0x68	; 104
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	3f ef       	ldi	r19, 0xFF	; 255
    2700:	4f e7       	ldi	r20, 0x7F	; 127
    2702:	57 e4       	ldi	r21, 0x47	; 71
    2704:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2708:	18 16       	cp	r1, r24
    270a:	0c f0       	brlt	.+2      	; 0x270e <LCD_displayCharacter+0x162>
    270c:	43 c0       	rjmp	.+134    	; 0x2794 <LCD_displayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270e:	fe 01       	movw	r30, r28
    2710:	e4 56       	subi	r30, 0x64	; 100
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e2       	ldi	r20, 0x20	; 32
    2722:	51 e4       	ldi	r21, 0x41	; 65
    2724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8e 01       	movw	r16, r28
    272e:	0a 56       	subi	r16, 0x6A	; 106
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	1f c0       	rjmp	.+62     	; 0x2784 <LCD_displayCharacter+0x1d8>
    2746:	fe 01       	movw	r30, r28
    2748:	ec 56       	subi	r30, 0x6C	; 108
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 e9       	ldi	r24, 0x90	; 144
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2754:	fe 01       	movw	r30, r28
    2756:	ec 56       	subi	r30, 0x6C	; 108
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_displayCharacter+0x1b2>
    2762:	fe 01       	movw	r30, r28
    2764:	ec 56       	subi	r30, 0x6C	; 108
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	de 01       	movw	r26, r28
    276e:	aa 56       	subi	r26, 0x6A	; 106
    2770:	bf 4f       	sbci	r27, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	ea 56       	subi	r30, 0x6A	; 106
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	11 96       	adiw	r26, 0x01	; 1
    2780:	9c 93       	st	X, r25
    2782:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	fe 01       	movw	r30, r28
    2786:	ea 56       	subi	r30, 0x6A	; 106
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	d1 f6       	brne	.-76     	; 0x2746 <LCD_displayCharacter+0x19a>
    2792:	4b c0       	rjmp	.+150    	; 0x282a <LCD_displayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2794:	8e 01       	movw	r16, r28
    2796:	0a 56       	subi	r16, 0x6A	; 106
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	fe 01       	movw	r30, r28
    279c:	e8 56       	subi	r30, 0x68	; 104
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	f8 01       	movw	r30, r16
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
    27b6:	de 01       	movw	r26, r28
    27b8:	ae 56       	subi	r26, 0x6E	; 110
    27ba:	bf 4f       	sbci	r27, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	ea 56       	subi	r30, 0x6A	; 106
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	9c 93       	st	X, r25
    27ca:	8e 93       	st	-X, r24
    27cc:	fe 01       	movw	r30, r28
    27ce:	ee 56       	subi	r30, 0x6E	; 110
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_displayCharacter+0x22a>
    27da:	fe 01       	movw	r30, r28
    27dc:	ee 56       	subi	r30, 0x6E	; 110
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	80 83       	st	Z, r24
    27e4:	22 c0       	rjmp	.+68     	; 0x282a <LCD_displayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27e6:	8e 01       	movw	r16, r28
    27e8:	00 56       	subi	r16, 0x60	; 96
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	fe 01       	movw	r30, r28
    27ee:	ef 55       	subi	r30, 0x5F	; 95
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	f8 01       	movw	r30, r16
    2804:	80 83       	st	Z, r24
    2806:	de 01       	movw	r26, r28
    2808:	af 56       	subi	r26, 0x6F	; 111
    280a:	bf 4f       	sbci	r27, 0xFF	; 255
    280c:	fe 01       	movw	r30, r28
    280e:	e0 56       	subi	r30, 0x60	; 96
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2816:	fe 01       	movw	r30, r28
    2818:	ef 56       	subi	r30, 0x6F	; 111
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	8a 95       	dec	r24
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_displayCharacter+0x272>
    2822:	fe 01       	movw	r30, r28
    2824:	ef 56       	subi	r30, 0x6F	; 111
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2834:	fe 01       	movw	r30, r28
    2836:	e3 57       	subi	r30, 0x73	; 115
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e0       	ldi	r26, 0x00	; 0
    2840:	b0 e4       	ldi	r27, 0x40	; 64
    2842:	80 83       	st	Z, r24
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	a2 83       	std	Z+2, r26	; 0x02
    2848:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    284a:	8e 01       	movw	r16, r28
    284c:	07 57       	subi	r16, 0x77	; 119
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	fe 01       	movw	r30, r28
    2852:	e3 57       	subi	r30, 0x73	; 115
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	2b ea       	ldi	r18, 0xAB	; 171
    2860:	3a ea       	ldi	r19, 0xAA	; 170
    2862:	4a ea       	ldi	r20, 0xAA	; 170
    2864:	50 e4       	ldi	r21, 0x40	; 64
    2866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	f8 01       	movw	r30, r16
    2870:	80 83       	st	Z, r24
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	a2 83       	std	Z+2, r26	; 0x02
    2876:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2878:	fe 01       	movw	r30, r28
    287a:	e7 57       	subi	r30, 0x77	; 119
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	34 f4       	brge	.+12     	; 0x28a2 <LCD_displayCharacter+0x2f6>
		__ticks = 1;
    2896:	fe 01       	movw	r30, r28
    2898:	e8 57       	subi	r30, 0x78	; 120
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 83       	st	Z, r24
    28a0:	e0 c0       	rjmp	.+448    	; 0x2a62 <LCD_displayCharacter+0x4b6>
	else if (__tmp > 255)
    28a2:	fe 01       	movw	r30, r28
    28a4:	e7 57       	subi	r30, 0x77	; 119
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	53 e4       	ldi	r21, 0x43	; 67
    28b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	0c f0       	brlt	.+2      	; 0x28c2 <LCD_displayCharacter+0x316>
    28c0:	c0 c0       	rjmp	.+384    	; 0x2a42 <LCD_displayCharacter+0x496>
	{
		_delay_ms(__us / 1000.0);
    28c2:	fe 01       	movw	r30, r28
    28c4:	e3 57       	subi	r30, 0x73	; 115
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	4a e7       	ldi	r20, 0x7A	; 122
    28d6:	54 e4       	ldi	r21, 0x44	; 68
    28d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	fe 01       	movw	r30, r28
    28e2:	ec 57       	subi	r30, 0x7C	; 124
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	8e 01       	movw	r16, r28
    28f0:	00 58       	subi	r16, 0x80	; 128
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	ec 57       	subi	r30, 0x7C	; 124
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a e7       	ldi	r20, 0x7A	; 122
    2908:	55 e4       	ldi	r21, 0x45	; 69
    290a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291c:	fe 01       	movw	r30, r28
    291e:	e0 58       	subi	r30, 0x80	; 128
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	44 f4       	brge	.+16     	; 0x294a <LCD_displayCharacter+0x39e>
		__ticks = 1;
    293a:	fe 01       	movw	r30, r28
    293c:	e2 58       	subi	r30, 0x82	; 130
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	64 c0       	rjmp	.+200    	; 0x2a12 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    294a:	fe 01       	movw	r30, r28
    294c:	e0 58       	subi	r30, 0x80	; 128
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	0c f0       	brlt	.+2      	; 0x296a <LCD_displayCharacter+0x3be>
    2968:	43 c0       	rjmp	.+134    	; 0x29f0 <LCD_displayCharacter+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	fe 01       	movw	r30, r28
    296c:	ec 57       	subi	r30, 0x7C	; 124
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	8e 01       	movw	r16, r28
    298a:	02 58       	subi	r16, 0x82	; 130
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	f8 01       	movw	r30, r16
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	1f c0       	rjmp	.+62     	; 0x29e0 <LCD_displayCharacter+0x434>
    29a2:	fe 01       	movw	r30, r28
    29a4:	e4 58       	subi	r30, 0x84	; 132
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 e9       	ldi	r24, 0x90	; 144
    29aa:	91 e0       	ldi	r25, 0x01	; 1
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29b0:	fe 01       	movw	r30, r28
    29b2:	e4 58       	subi	r30, 0x84	; 132
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_displayCharacter+0x40e>
    29be:	fe 01       	movw	r30, r28
    29c0:	e4 58       	subi	r30, 0x84	; 132
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	de 01       	movw	r26, r28
    29ca:	a2 58       	subi	r26, 0x82	; 130
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	e2 58       	subi	r30, 0x82	; 130
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	fe 01       	movw	r30, r28
    29e2:	e2 58       	subi	r30, 0x82	; 130
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	d1 f6       	brne	.-76     	; 0x29a2 <LCD_displayCharacter+0x3f6>
    29ee:	4b c0       	rjmp	.+150    	; 0x2a86 <LCD_displayCharacter+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	8e 01       	movw	r16, r28
    29f2:	02 58       	subi	r16, 0x82	; 130
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	e0 58       	subi	r30, 0x80	; 128
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	de 01       	movw	r26, r28
    2a14:	a6 58       	subi	r26, 0x86	; 134
    2a16:	bf 4f       	sbci	r27, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e2 58       	subi	r30, 0x82	; 130
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	11 96       	adiw	r26, 0x01	; 1
    2a24:	9c 93       	st	X, r25
    2a26:	8e 93       	st	-X, r24
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e6 58       	subi	r30, 0x86	; 134
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <LCD_displayCharacter+0x486>
    2a36:	fe 01       	movw	r30, r28
    2a38:	e6 58       	subi	r30, 0x86	; 134
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
    2a40:	22 c0       	rjmp	.+68     	; 0x2a86 <LCD_displayCharacter+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a42:	8e 01       	movw	r16, r28
    2a44:	08 57       	subi	r16, 0x78	; 120
    2a46:	1f 4f       	sbci	r17, 0xFF	; 255
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e7 57       	subi	r30, 0x77	; 119
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	80 83       	st	Z, r24
    2a62:	de 01       	movw	r26, r28
    2a64:	a7 58       	subi	r26, 0x87	; 135
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e8 57       	subi	r30, 0x78	; 120
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a72:	fe 01       	movw	r30, r28
    2a74:	e7 58       	subi	r30, 0x87	; 135
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	8a 95       	dec	r24
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_displayCharacter+0x4ce>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e7 58       	subi	r30, 0x87	; 135
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 83       	st	Z, r24
        GPIO_writePort(LCD_DATA_PORT_ID, data);
        _delay_us(2);
    #elif (LCD_BIT_MODE == 4)

        /* Send high command */
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID, GET_BIT(data, 4));
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 55       	subi	r30, 0x57	; 87
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	80 71       	andi	r24, 0x10	; 16
    2a94:	90 70       	andi	r25, 0x00	; 0
    2a96:	95 95       	asr	r25
    2a98:	87 95       	ror	r24
    2a9a:	95 95       	asr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	95 95       	asr	r25
    2aa0:	87 95       	ror	r24
    2aa2:	95 95       	asr	r25
    2aa4:	87 95       	ror	r24
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	63 e0       	ldi	r22, 0x03	; 3
    2aac:	49 2f       	mov	r20, r25
    2aae:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 1, GET_BIT(data, 5));
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e7 55       	subi	r30, 0x57	; 87
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	80 72       	andi	r24, 0x20	; 32
    2ac0:	90 70       	andi	r25, 0x00	; 0
    2ac2:	95 95       	asr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	95 95       	asr	r25
    2ac8:	87 95       	ror	r24
    2aca:	95 95       	asr	r25
    2acc:	87 95       	ror	r24
    2ace:	95 95       	asr	r25
    2ad0:	87 95       	ror	r24
    2ad2:	95 95       	asr	r25
    2ad4:	87 95       	ror	r24
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	64 e0       	ldi	r22, 0x04	; 4
    2adc:	49 2f       	mov	r20, r25
    2ade:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 2, GET_BIT(data, 6));
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e7 55       	subi	r30, 0x57	; 87
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	80 74       	andi	r24, 0x40	; 64
    2af0:	90 70       	andi	r25, 0x00	; 0
    2af2:	08 2e       	mov	r0, r24
    2af4:	89 2f       	mov	r24, r25
    2af6:	00 0c       	add	r0, r0
    2af8:	88 1f       	adc	r24, r24
    2afa:	99 0b       	sbc	r25, r25
    2afc:	00 0c       	add	r0, r0
    2afe:	88 1f       	adc	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	98 2f       	mov	r25, r24
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	65 e0       	ldi	r22, 0x05	; 5
    2b08:	49 2f       	mov	r20, r25
    2b0a:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 3, GET_BIT(data, 7));
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e7 55       	subi	r30, 0x57	; 87
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	80 81       	ld	r24, Z
    2b16:	98 2f       	mov	r25, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	99 27       	eor	r25, r25
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	66 e0       	ldi	r22, 0x06	; 6
    2b22:	49 2f       	mov	r20, r25
    2b24:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2b28:	fe 01       	movw	r30, r28
    2b2a:	eb 58       	subi	r30, 0x8B	; 139
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a0 e0       	ldi	r26, 0x00	; 0
    2b34:	b0 e4       	ldi	r27, 0x40	; 64
    2b36:	80 83       	st	Z, r24
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	a2 83       	std	Z+2, r26	; 0x02
    2b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b3e:	8e 01       	movw	r16, r28
    2b40:	0f 58       	subi	r16, 0x8F	; 143
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	eb 58       	subi	r30, 0x8B	; 139
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	2b ea       	ldi	r18, 0xAB	; 171
    2b54:	3a ea       	ldi	r19, 0xAA	; 170
    2b56:	4a ea       	ldi	r20, 0xAA	; 170
    2b58:	50 e4       	ldi	r21, 0x40	; 64
    2b5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	80 83       	st	Z, r24
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	a2 83       	std	Z+2, r26	; 0x02
    2b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	ef 58       	subi	r30, 0x8F	; 143
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	34 f4       	brge	.+12     	; 0x2b96 <LCD_displayCharacter+0x5ea>
		__ticks = 1;
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e0 59       	subi	r30, 0x90	; 144
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 83       	st	Z, r24
    2b94:	e0 c0       	rjmp	.+448    	; 0x2d56 <LCD_displayCharacter+0x7aa>
	else if (__tmp > 255)
    2b96:	fe 01       	movw	r30, r28
    2b98:	ef 58       	subi	r30, 0x8F	; 143
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4f e7       	ldi	r20, 0x7F	; 127
    2baa:	53 e4       	ldi	r21, 0x43	; 67
    2bac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	0c f0       	brlt	.+2      	; 0x2bb6 <LCD_displayCharacter+0x60a>
    2bb4:	c0 c0       	rjmp	.+384    	; 0x2d36 <LCD_displayCharacter+0x78a>
	{
		_delay_ms(__us / 1000.0);
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	eb 58       	subi	r30, 0x8B	; 139
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	54 e4       	ldi	r21, 0x44	; 68
    2bcc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e4 59       	subi	r30, 0x94	; 148
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 83       	st	Z, r24
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	a2 83       	std	Z+2, r26	; 0x02
    2be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	8e 01       	movw	r16, r28
    2be4:	08 59       	subi	r16, 0x98	; 152
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	fe 01       	movw	r30, r28
    2bea:	e4 59       	subi	r30, 0x94	; 148
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4a e7       	ldi	r20, 0x7A	; 122
    2bfc:	55 e4       	ldi	r21, 0x45	; 69
    2bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	f8 01       	movw	r30, r16
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	a2 83       	std	Z+2, r26	; 0x02
    2c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c10:	fe 01       	movw	r30, r28
    2c12:	e8 59       	subi	r30, 0x98	; 152
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e8       	ldi	r20, 0x80	; 128
    2c24:	5f e3       	ldi	r21, 0x3F	; 63
    2c26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c2a:	88 23       	and	r24, r24
    2c2c:	44 f4       	brge	.+16     	; 0x2c3e <LCD_displayCharacter+0x692>
		__ticks = 1;
    2c2e:	fe 01       	movw	r30, r28
    2c30:	ea 59       	subi	r30, 0x9A	; 154
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	80 83       	st	Z, r24
    2c3c:	64 c0       	rjmp	.+200    	; 0x2d06 <LCD_displayCharacter+0x75a>
	else if (__tmp > 65535)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e8 59       	subi	r30, 0x98	; 152
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	57 e4       	ldi	r21, 0x47	; 71
    2c54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	0c f0       	brlt	.+2      	; 0x2c5e <LCD_displayCharacter+0x6b2>
    2c5c:	43 c0       	rjmp	.+134    	; 0x2ce4 <LCD_displayCharacter+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e4 59       	subi	r30, 0x94	; 148
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e2       	ldi	r20, 0x20	; 32
    2c72:	51 e4       	ldi	r21, 0x41	; 65
    2c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8e 01       	movw	r16, r28
    2c7e:	0a 59       	subi	r16, 0x9A	; 154
    2c80:	1f 4f       	sbci	r17, 0xFF	; 255
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	f8 01       	movw	r30, r16
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
    2c94:	1f c0       	rjmp	.+62     	; 0x2cd4 <LCD_displayCharacter+0x728>
    2c96:	fe 01       	movw	r30, r28
    2c98:	ec 59       	subi	r30, 0x9C	; 156
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 e9       	ldi	r24, 0x90	; 144
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ec 59       	subi	r30, 0x9C	; 156
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 81       	ld	r24, Z
    2cac:	91 81       	ldd	r25, Z+1	; 0x01
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <LCD_displayCharacter+0x702>
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	ec 59       	subi	r30, 0x9C	; 156
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	de 01       	movw	r26, r28
    2cbe:	aa 59       	subi	r26, 0x9A	; 154
    2cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ea 59       	subi	r30, 0x9A	; 154
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	11 96       	adiw	r26, 0x01	; 1
    2cd0:	9c 93       	st	X, r25
    2cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ea 59       	subi	r30, 0x9A	; 154
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	d1 f6       	brne	.-76     	; 0x2c96 <LCD_displayCharacter+0x6ea>
    2ce2:	4b c0       	rjmp	.+150    	; 0x2d7a <LCD_displayCharacter+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	0a 59       	subi	r16, 0x9A	; 154
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	fe 01       	movw	r30, r28
    2cec:	e8 59       	subi	r30, 0x98	; 152
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	f8 01       	movw	r30, r16
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    2d06:	de 01       	movw	r26, r28
    2d08:	ae 59       	subi	r26, 0x9E	; 158
    2d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	ea 59       	subi	r30, 0x9A	; 154
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	9c 93       	st	X, r25
    2d1a:	8e 93       	st	-X, r24
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ee 59       	subi	r30, 0x9E	; 158
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_displayCharacter+0x77a>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ee 59       	subi	r30, 0x9E	; 158
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	22 c0       	rjmp	.+68     	; 0x2d7a <LCD_displayCharacter+0x7ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d36:	8e 01       	movw	r16, r28
    2d38:	00 59       	subi	r16, 0x90	; 144
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ef 58       	subi	r30, 0x8F	; 143
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	f8 01       	movw	r30, r16
    2d54:	80 83       	st	Z, r24
    2d56:	de 01       	movw	r26, r28
    2d58:	af 59       	subi	r26, 0x9F	; 159
    2d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e0 59       	subi	r30, 0x90	; 144
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	80 81       	ld	r24, Z
    2d64:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d66:	fe 01       	movw	r30, r28
    2d68:	ef 59       	subi	r30, 0x9F	; 159
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8a 95       	dec	r24
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_displayCharacter+0x7c2>
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 59       	subi	r30, 0x9F	; 159
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 83       	st	Z, r24

        /* delay */
        _delay_us(2);

        /* Disable */
        GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	62 e0       	ldi	r22, 0x02	; 2
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2d84:	fe 01       	movw	r30, r28
    2d86:	e3 5a       	subi	r30, 0xA3	; 163
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a0 e0       	ldi	r26, 0x00	; 0
    2d90:	b0 e4       	ldi	r27, 0x40	; 64
    2d92:	80 83       	st	Z, r24
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	a2 83       	std	Z+2, r26	; 0x02
    2d98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	07 5a       	subi	r16, 0xA7	; 167
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	fe 01       	movw	r30, r28
    2da2:	e3 5a       	subi	r30, 0xA3	; 163
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	60 81       	ld	r22, Z
    2da8:	71 81       	ldd	r23, Z+1	; 0x01
    2daa:	82 81       	ldd	r24, Z+2	; 0x02
    2dac:	93 81       	ldd	r25, Z+3	; 0x03
    2dae:	2b ea       	ldi	r18, 0xAB	; 171
    2db0:	3a ea       	ldi	r19, 0xAA	; 170
    2db2:	4a ea       	ldi	r20, 0xAA	; 170
    2db4:	50 e4       	ldi	r21, 0x40	; 64
    2db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	80 83       	st	Z, r24
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	a2 83       	std	Z+2, r26	; 0x02
    2dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e7 5a       	subi	r30, 0xA7	; 167
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	34 f4       	brge	.+12     	; 0x2df2 <LCD_displayCharacter+0x846>
		__ticks = 1;
    2de6:	fe 01       	movw	r30, r28
    2de8:	e8 5a       	subi	r30, 0xA8	; 168
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	80 83       	st	Z, r24
    2df0:	e0 c0       	rjmp	.+448    	; 0x2fb2 <LCD_displayCharacter+0xa06>
	else if (__tmp > 255)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 5a       	subi	r30, 0xA7	; 167
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	53 e4       	ldi	r21, 0x43	; 67
    2e08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	0c f0       	brlt	.+2      	; 0x2e12 <LCD_displayCharacter+0x866>
    2e10:	c0 c0       	rjmp	.+384    	; 0x2f92 <LCD_displayCharacter+0x9e6>
	{
		_delay_ms(__us / 1000.0);
    2e12:	fe 01       	movw	r30, r28
    2e14:	e3 5a       	subi	r30, 0xA3	; 163
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a e7       	ldi	r20, 0x7A	; 122
    2e26:	54 e4       	ldi	r21, 0x44	; 68
    2e28:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	fe 01       	movw	r30, r28
    2e32:	ec 5a       	subi	r30, 0xAC	; 172
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 83       	st	Z, r24
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	a2 83       	std	Z+2, r26	; 0x02
    2e3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	8e 01       	movw	r16, r28
    2e40:	00 5b       	subi	r16, 0xB0	; 176
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	fe 01       	movw	r30, r28
    2e46:	ec 5a       	subi	r30, 0xAC	; 172
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	60 81       	ld	r22, Z
    2e4c:	71 81       	ldd	r23, Z+1	; 0x01
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	4a e7       	ldi	r20, 0x7A	; 122
    2e58:	55 e4       	ldi	r21, 0x45	; 69
    2e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	f8 01       	movw	r30, r16
    2e64:	80 83       	st	Z, r24
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	a2 83       	std	Z+2, r26	; 0x02
    2e6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e0 5b       	subi	r30, 0xB0	; 176
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e8       	ldi	r20, 0x80	; 128
    2e80:	5f e3       	ldi	r21, 0x3F	; 63
    2e82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e86:	88 23       	and	r24, r24
    2e88:	44 f4       	brge	.+16     	; 0x2e9a <LCD_displayCharacter+0x8ee>
		__ticks = 1;
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e2 5b       	subi	r30, 0xB2	; 178
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
    2e98:	64 c0       	rjmp	.+200    	; 0x2f62 <LCD_displayCharacter+0x9b6>
	else if (__tmp > 65535)
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e0 5b       	subi	r30, 0xB0	; 176
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	0c f0       	brlt	.+2      	; 0x2eba <LCD_displayCharacter+0x90e>
    2eb8:	43 c0       	rjmp	.+134    	; 0x2f40 <LCD_displayCharacter+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	fe 01       	movw	r30, r28
    2ebc:	ec 5a       	subi	r30, 0xAC	; 172
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e2       	ldi	r20, 0x20	; 32
    2ece:	51 e4       	ldi	r21, 0x41	; 65
    2ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	8e 01       	movw	r16, r28
    2eda:	02 5b       	subi	r16, 0xB2	; 178
    2edc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	f8 01       	movw	r30, r16
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	80 83       	st	Z, r24
    2ef0:	1f c0       	rjmp	.+62     	; 0x2f30 <LCD_displayCharacter+0x984>
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e4 5b       	subi	r30, 0xB4	; 180
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 e9       	ldi	r24, 0x90	; 144
    2efa:	91 e0       	ldi	r25, 0x01	; 1
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f00:	fe 01       	movw	r30, r28
    2f02:	e4 5b       	subi	r30, 0xB4	; 180
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 81       	ld	r24, Z
    2f08:	91 81       	ldd	r25, Z+1	; 0x01
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <LCD_displayCharacter+0x95e>
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e4 5b       	subi	r30, 0xB4	; 180
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f18:	de 01       	movw	r26, r28
    2f1a:	a2 5b       	subi	r26, 0xB2	; 178
    2f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e2 5b       	subi	r30, 0xB2	; 178
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	11 96       	adiw	r26, 0x01	; 1
    2f2c:	9c 93       	st	X, r25
    2f2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f30:	fe 01       	movw	r30, r28
    2f32:	e2 5b       	subi	r30, 0xB2	; 178
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	91 81       	ldd	r25, Z+1	; 0x01
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	d1 f6       	brne	.-76     	; 0x2ef2 <LCD_displayCharacter+0x946>
    2f3e:	4b c0       	rjmp	.+150    	; 0x2fd6 <LCD_displayCharacter+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f40:	8e 01       	movw	r16, r28
    2f42:	02 5b       	subi	r16, 0xB2	; 178
    2f44:	1f 4f       	sbci	r17, 0xFF	; 255
    2f46:	fe 01       	movw	r30, r28
    2f48:	e0 5b       	subi	r30, 0xB0	; 176
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	de 01       	movw	r26, r28
    2f64:	a6 5b       	subi	r26, 0xB6	; 182
    2f66:	bf 4f       	sbci	r27, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e2 5b       	subi	r30, 0xB2	; 178
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	11 96       	adiw	r26, 0x01	; 1
    2f74:	9c 93       	st	X, r25
    2f76:	8e 93       	st	-X, r24
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e6 5b       	subi	r30, 0xB6	; 182
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <LCD_displayCharacter+0x9d6>
    2f86:	fe 01       	movw	r30, r28
    2f88:	e6 5b       	subi	r30, 0xB6	; 182
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
    2f90:	22 c0       	rjmp	.+68     	; 0x2fd6 <LCD_displayCharacter+0xa2a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f92:	8e 01       	movw	r16, r28
    2f94:	08 5a       	subi	r16, 0xA8	; 168
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e7 5a       	subi	r30, 0xA7	; 167
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	60 81       	ld	r22, Z
    2fa0:	71 81       	ldd	r23, Z+1	; 0x01
    2fa2:	82 81       	ldd	r24, Z+2	; 0x02
    2fa4:	93 81       	ldd	r25, Z+3	; 0x03
    2fa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	f8 01       	movw	r30, r16
    2fb0:	80 83       	st	Z, r24
    2fb2:	de 01       	movw	r26, r28
    2fb4:	a7 5b       	subi	r26, 0xB7	; 183
    2fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e8 5a       	subi	r30, 0xA8	; 168
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e7 5b       	subi	r30, 0xB7	; 183
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	8a 95       	dec	r24
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <LCD_displayCharacter+0xa1e>
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e7 5b       	subi	r30, 0xB7	; 183
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 83       	st	Z, r24
        _delay_us(2);

        /* enable */
        GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	62 e0       	ldi	r22, 0x02	; 2
    2fda:	41 e0       	ldi	r20, 0x01	; 1
    2fdc:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	eb 5b       	subi	r30, 0xBB	; 187
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a0 e0       	ldi	r26, 0x00	; 0
    2fec:	b0 e4       	ldi	r27, 0x40	; 64
    2fee:	80 83       	st	Z, r24
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	a2 83       	std	Z+2, r26	; 0x02
    2ff4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ff6:	8e 01       	movw	r16, r28
    2ff8:	0f 5b       	subi	r16, 0xBF	; 191
    2ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	eb 5b       	subi	r30, 0xBB	; 187
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	2b ea       	ldi	r18, 0xAB	; 171
    300c:	3a ea       	ldi	r19, 0xAA	; 170
    300e:	4a ea       	ldi	r20, 0xAA	; 170
    3010:	50 e4       	ldi	r21, 0x40	; 64
    3012:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	f8 01       	movw	r30, r16
    301c:	80 83       	st	Z, r24
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	a2 83       	std	Z+2, r26	; 0x02
    3022:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3024:	fe 01       	movw	r30, r28
    3026:	ef 5b       	subi	r30, 0xBF	; 191
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    303e:	88 23       	and	r24, r24
    3040:	34 f4       	brge	.+12     	; 0x304e <LCD_displayCharacter+0xaa2>
		__ticks = 1;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	fe 01       	movw	r30, r28
    3046:	e0 5c       	subi	r30, 0xC0	; 192
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 83       	st	Z, r24
    304c:	9d c0       	rjmp	.+314    	; 0x3188 <LCD_displayCharacter+0xbdc>
	else if (__tmp > 255)
    304e:	fe 01       	movw	r30, r28
    3050:	ef 5b       	subi	r30, 0xBF	; 191
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	53 e4       	ldi	r21, 0x43	; 67
    3064:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	0c f0       	brlt	.+2      	; 0x306e <LCD_displayCharacter+0xac2>
    306c:	7e c0       	rjmp	.+252    	; 0x316a <LCD_displayCharacter+0xbbe>
	{
		_delay_ms(__us / 1000.0);
    306e:	fe 01       	movw	r30, r28
    3070:	eb 5b       	subi	r30, 0xBB	; 187
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a e7       	ldi	r20, 0x7A	; 122
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8c af       	std	Y+60, r24	; 0x3c
    308e:	9d af       	std	Y+61, r25	; 0x3d
    3090:	ae af       	std	Y+62, r26	; 0x3e
    3092:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3094:	6c ad       	ldd	r22, Y+60	; 0x3c
    3096:	7d ad       	ldd	r23, Y+61	; 0x3d
    3098:	8e ad       	ldd	r24, Y+62	; 0x3e
    309a:	9f ad       	ldd	r25, Y+63	; 0x3f
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a e7       	ldi	r20, 0x7A	; 122
    30a2:	55 e4       	ldi	r21, 0x45	; 69
    30a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	88 af       	std	Y+56, r24	; 0x38
    30ae:	99 af       	std	Y+57, r25	; 0x39
    30b0:	aa af       	std	Y+58, r26	; 0x3a
    30b2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    30b4:	68 ad       	ldd	r22, Y+56	; 0x38
    30b6:	79 ad       	ldd	r23, Y+57	; 0x39
    30b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    30ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <LCD_displayCharacter+0xb2a>
		__ticks = 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9f ab       	std	Y+55, r25	; 0x37
    30d2:	8e ab       	std	Y+54, r24	; 0x36
    30d4:	3f c0       	rjmp	.+126    	; 0x3154 <LCD_displayCharacter+0xba8>
	else if (__tmp > 65535)
    30d6:	68 ad       	ldd	r22, Y+56	; 0x38
    30d8:	79 ad       	ldd	r23, Y+57	; 0x39
    30da:	8a ad       	ldd	r24, Y+58	; 0x3a
    30dc:	9b ad       	ldd	r25, Y+59	; 0x3b
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	4c f5       	brge	.+82     	; 0x3140 <LCD_displayCharacter+0xb94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    30f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    30f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    30f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9f ab       	std	Y+55, r25	; 0x37
    3114:	8e ab       	std	Y+54, r24	; 0x36
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <LCD_displayCharacter+0xb8a>
    3118:	80 e9       	ldi	r24, 0x90	; 144
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	9d ab       	std	Y+53, r25	; 0x35
    311e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3120:	8c a9       	ldd	r24, Y+52	; 0x34
    3122:	9d a9       	ldd	r25, Y+53	; 0x35
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <LCD_displayCharacter+0xb78>
    3128:	9d ab       	std	Y+53, r25	; 0x35
    312a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	8e a9       	ldd	r24, Y+54	; 0x36
    312e:	9f a9       	ldd	r25, Y+55	; 0x37
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9f ab       	std	Y+55, r25	; 0x37
    3134:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	8e a9       	ldd	r24, Y+54	; 0x36
    3138:	9f a9       	ldd	r25, Y+55	; 0x37
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <LCD_displayCharacter+0xb6c>
    313e:	2d c0       	rjmp	.+90     	; 0x319a <LCD_displayCharacter+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	68 ad       	ldd	r22, Y+56	; 0x38
    3142:	79 ad       	ldd	r23, Y+57	; 0x39
    3144:	8a ad       	ldd	r24, Y+58	; 0x3a
    3146:	9b ad       	ldd	r25, Y+59	; 0x3b
    3148:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9f ab       	std	Y+55, r25	; 0x37
    3152:	8e ab       	std	Y+54, r24	; 0x36
    3154:	8e a9       	ldd	r24, Y+54	; 0x36
    3156:	9f a9       	ldd	r25, Y+55	; 0x37
    3158:	9b ab       	std	Y+51, r25	; 0x33
    315a:	8a ab       	std	Y+50, r24	; 0x32
    315c:	8a a9       	ldd	r24, Y+50	; 0x32
    315e:	9b a9       	ldd	r25, Y+51	; 0x33
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <LCD_displayCharacter+0xbb4>
    3164:	9b ab       	std	Y+51, r25	; 0x33
    3166:	8a ab       	std	Y+50, r24	; 0x32
    3168:	18 c0       	rjmp	.+48     	; 0x319a <LCD_displayCharacter+0xbee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    316a:	fe 01       	movw	r30, r28
    316c:	ef 5b       	subi	r30, 0xBF	; 191
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	fe 01       	movw	r30, r28
    3182:	e0 5c       	subi	r30, 0xC0	; 192
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 83       	st	Z, r24
    3188:	fe 01       	movw	r30, r28
    318a:	e0 5c       	subi	r30, 0xC0	; 192
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3192:	89 a9       	ldd	r24, Y+49	; 0x31
    3194:	8a 95       	dec	r24
    3196:	f1 f7       	brne	.-4      	; 0x3194 <LCD_displayCharacter+0xbe8>
    3198:	89 ab       	std	Y+49, r24	; 0x31
        _delay_us(2);

        /* send low command */
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID, GET_BIT(data, 0));
    319a:	fe 01       	movw	r30, r28
    319c:	e7 55       	subi	r30, 0x57	; 87
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	98 2f       	mov	r25, r24
    31a4:	91 70       	andi	r25, 0x01	; 1
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	63 e0       	ldi	r22, 0x03	; 3
    31aa:	49 2f       	mov	r20, r25
    31ac:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 1, GET_BIT(data, 1));
    31b0:	fe 01       	movw	r30, r28
    31b2:	e7 55       	subi	r30, 0x57	; 87
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	82 70       	andi	r24, 0x02	; 2
    31be:	90 70       	andi	r25, 0x00	; 0
    31c0:	95 95       	asr	r25
    31c2:	87 95       	ror	r24
    31c4:	98 2f       	mov	r25, r24
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	64 e0       	ldi	r22, 0x04	; 4
    31ca:	49 2f       	mov	r20, r25
    31cc:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 2, GET_BIT(data, 2));
    31d0:	fe 01       	movw	r30, r28
    31d2:	e7 55       	subi	r30, 0x57	; 87
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 81       	ld	r24, Z
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	84 70       	andi	r24, 0x04	; 4
    31de:	90 70       	andi	r25, 0x00	; 0
    31e0:	95 95       	asr	r25
    31e2:	87 95       	ror	r24
    31e4:	95 95       	asr	r25
    31e6:	87 95       	ror	r24
    31e8:	98 2f       	mov	r25, r24
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	65 e0       	ldi	r22, 0x05	; 5
    31ee:	49 2f       	mov	r20, r25
    31f0:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
        GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 3, GET_BIT(data, 3));
    31f4:	fe 01       	movw	r30, r28
    31f6:	e7 55       	subi	r30, 0x57	; 87
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	88 2f       	mov	r24, r24
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	88 70       	andi	r24, 0x08	; 8
    3202:	90 70       	andi	r25, 0x00	; 0
    3204:	95 95       	asr	r25
    3206:	87 95       	ror	r24
    3208:	95 95       	asr	r25
    320a:	87 95       	ror	r24
    320c:	95 95       	asr	r25
    320e:	87 95       	ror	r24
    3210:	98 2f       	mov	r25, r24
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	66 e0       	ldi	r22, 0x06	; 6
    3216:	49 2f       	mov	r20, r25
    3218:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a0 e0       	ldi	r26, 0x00	; 0
    3222:	b0 e4       	ldi	r27, 0x40	; 64
    3224:	8d a7       	std	Y+45, r24	; 0x2d
    3226:	9e a7       	std	Y+46, r25	; 0x2e
    3228:	af a7       	std	Y+47, r26	; 0x2f
    322a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    322c:	6d a5       	ldd	r22, Y+45	; 0x2d
    322e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3230:	8f a5       	ldd	r24, Y+47	; 0x2f
    3232:	98 a9       	ldd	r25, Y+48	; 0x30
    3234:	2b ea       	ldi	r18, 0xAB	; 171
    3236:	3a ea       	ldi	r19, 0xAA	; 170
    3238:	4a ea       	ldi	r20, 0xAA	; 170
    323a:	50 e4       	ldi	r21, 0x40	; 64
    323c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	89 a7       	std	Y+41, r24	; 0x29
    3246:	9a a7       	std	Y+42, r25	; 0x2a
    3248:	ab a7       	std	Y+43, r26	; 0x2b
    324a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    324c:	69 a5       	ldd	r22, Y+41	; 0x29
    324e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3250:	8b a5       	ldd	r24, Y+43	; 0x2b
    3252:	9c a5       	ldd	r25, Y+44	; 0x2c
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	1c f4       	brge	.+6      	; 0x326a <LCD_displayCharacter+0xcbe>
		__ticks = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	88 a7       	std	Y+40, r24	; 0x28
    3268:	91 c0       	rjmp	.+290    	; 0x338c <LCD_displayCharacter+0xde0>
	else if (__tmp > 255)
    326a:	69 a5       	ldd	r22, Y+41	; 0x29
    326c:	7a a5       	ldd	r23, Y+42	; 0x2a
    326e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3270:	9c a5       	ldd	r25, Y+44	; 0x2c
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	4f e7       	ldi	r20, 0x7F	; 127
    3278:	53 e4       	ldi	r21, 0x43	; 67
    327a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    327e:	18 16       	cp	r1, r24
    3280:	0c f0       	brlt	.+2      	; 0x3284 <LCD_displayCharacter+0xcd8>
    3282:	7b c0       	rjmp	.+246    	; 0x337a <LCD_displayCharacter+0xdce>
	{
		_delay_ms(__us / 1000.0);
    3284:	6d a5       	ldd	r22, Y+45	; 0x2d
    3286:	7e a5       	ldd	r23, Y+46	; 0x2e
    3288:	8f a5       	ldd	r24, Y+47	; 0x2f
    328a:	98 a9       	ldd	r25, Y+48	; 0x30
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a e7       	ldi	r20, 0x7A	; 122
    3292:	54 e4       	ldi	r21, 0x44	; 68
    3294:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8c a3       	std	Y+36, r24	; 0x24
    329e:	9d a3       	std	Y+37, r25	; 0x25
    32a0:	ae a3       	std	Y+38, r26	; 0x26
    32a2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a4:	6c a1       	ldd	r22, Y+36	; 0x24
    32a6:	7d a1       	ldd	r23, Y+37	; 0x25
    32a8:	8e a1       	ldd	r24, Y+38	; 0x26
    32aa:	9f a1       	ldd	r25, Y+39	; 0x27
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4a e7       	ldi	r20, 0x7A	; 122
    32b2:	55 e4       	ldi	r21, 0x45	; 69
    32b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	88 a3       	std	Y+32, r24	; 0x20
    32be:	99 a3       	std	Y+33, r25	; 0x21
    32c0:	aa a3       	std	Y+34, r26	; 0x22
    32c2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    32c4:	68 a1       	ldd	r22, Y+32	; 0x20
    32c6:	79 a1       	ldd	r23, Y+33	; 0x21
    32c8:	8a a1       	ldd	r24, Y+34	; 0x22
    32ca:	9b a1       	ldd	r25, Y+35	; 0x23
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	2c f4       	brge	.+10     	; 0x32e6 <LCD_displayCharacter+0xd3a>
		__ticks = 1;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	9f 8f       	std	Y+31, r25	; 0x1f
    32e2:	8e 8f       	std	Y+30, r24	; 0x1e
    32e4:	3f c0       	rjmp	.+126    	; 0x3364 <LCD_displayCharacter+0xdb8>
	else if (__tmp > 65535)
    32e6:	68 a1       	ldd	r22, Y+32	; 0x20
    32e8:	79 a1       	ldd	r23, Y+33	; 0x21
    32ea:	8a a1       	ldd	r24, Y+34	; 0x22
    32ec:	9b a1       	ldd	r25, Y+35	; 0x23
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	3f ef       	ldi	r19, 0xFF	; 255
    32f2:	4f e7       	ldi	r20, 0x7F	; 127
    32f4:	57 e4       	ldi	r21, 0x47	; 71
    32f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32fa:	18 16       	cp	r1, r24
    32fc:	4c f5       	brge	.+82     	; 0x3350 <LCD_displayCharacter+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fe:	6c a1       	ldd	r22, Y+36	; 0x24
    3300:	7d a1       	ldd	r23, Y+37	; 0x25
    3302:	8e a1       	ldd	r24, Y+38	; 0x26
    3304:	9f a1       	ldd	r25, Y+39	; 0x27
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e2       	ldi	r20, 0x20	; 32
    330c:	51 e4       	ldi	r21, 0x41	; 65
    330e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9f 8f       	std	Y+31, r25	; 0x1f
    3324:	8e 8f       	std	Y+30, r24	; 0x1e
    3326:	0f c0       	rjmp	.+30     	; 0x3346 <LCD_displayCharacter+0xd9a>
    3328:	80 e9       	ldi	r24, 0x90	; 144
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	9d 8f       	std	Y+29, r25	; 0x1d
    332e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3330:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3332:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <LCD_displayCharacter+0xd88>
    3338:	9d 8f       	std	Y+29, r25	; 0x1d
    333a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    333e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	9f 8f       	std	Y+31, r25	; 0x1f
    3344:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3346:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3348:	9f 8d       	ldd	r25, Y+31	; 0x1f
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	69 f7       	brne	.-38     	; 0x3328 <LCD_displayCharacter+0xd7c>
    334e:	24 c0       	rjmp	.+72     	; 0x3398 <LCD_displayCharacter+0xdec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3350:	68 a1       	ldd	r22, Y+32	; 0x20
    3352:	79 a1       	ldd	r23, Y+33	; 0x21
    3354:	8a a1       	ldd	r24, Y+34	; 0x22
    3356:	9b a1       	ldd	r25, Y+35	; 0x23
    3358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9f 8f       	std	Y+31, r25	; 0x1f
    3362:	8e 8f       	std	Y+30, r24	; 0x1e
    3364:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3366:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3368:	9b 8f       	std	Y+27, r25	; 0x1b
    336a:	8a 8f       	std	Y+26, r24	; 0x1a
    336c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    336e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <LCD_displayCharacter+0xdc4>
    3374:	9b 8f       	std	Y+27, r25	; 0x1b
    3376:	8a 8f       	std	Y+26, r24	; 0x1a
    3378:	0f c0       	rjmp	.+30     	; 0x3398 <LCD_displayCharacter+0xdec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    337a:	69 a5       	ldd	r22, Y+41	; 0x29
    337c:	7a a5       	ldd	r23, Y+42	; 0x2a
    337e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3380:	9c a5       	ldd	r25, Y+44	; 0x2c
    3382:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	88 a7       	std	Y+40, r24	; 0x28
    338c:	88 a5       	ldd	r24, Y+40	; 0x28
    338e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3390:	89 8d       	ldd	r24, Y+25	; 0x19
    3392:	8a 95       	dec	r24
    3394:	f1 f7       	brne	.-4      	; 0x3392 <LCD_displayCharacter+0xde6>
    3396:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	62 e0       	ldi	r22, 0x02	; 2
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_writePin>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a0 e0       	ldi	r26, 0x00	; 0
    33a8:	b0 e4       	ldi	r27, 0x40	; 64
    33aa:	8d 8b       	std	Y+21, r24	; 0x15
    33ac:	9e 8b       	std	Y+22, r25	; 0x16
    33ae:	af 8b       	std	Y+23, r26	; 0x17
    33b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33b2:	6d 89       	ldd	r22, Y+21	; 0x15
    33b4:	7e 89       	ldd	r23, Y+22	; 0x16
    33b6:	8f 89       	ldd	r24, Y+23	; 0x17
    33b8:	98 8d       	ldd	r25, Y+24	; 0x18
    33ba:	2b ea       	ldi	r18, 0xAB	; 171
    33bc:	3a ea       	ldi	r19, 0xAA	; 170
    33be:	4a ea       	ldi	r20, 0xAA	; 170
    33c0:	50 e4       	ldi	r21, 0x40	; 64
    33c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	89 8b       	std	Y+17, r24	; 0x11
    33cc:	9a 8b       	std	Y+18, r25	; 0x12
    33ce:	ab 8b       	std	Y+19, r26	; 0x13
    33d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33d2:	69 89       	ldd	r22, Y+17	; 0x11
    33d4:	7a 89       	ldd	r23, Y+18	; 0x12
    33d6:	8b 89       	ldd	r24, Y+19	; 0x13
    33d8:	9c 89       	ldd	r25, Y+20	; 0x14
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	1c f4       	brge	.+6      	; 0x33f0 <LCD_displayCharacter+0xe44>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	88 8b       	std	Y+16, r24	; 0x10
    33ee:	91 c0       	rjmp	.+290    	; 0x3512 <LCD_displayCharacter+0xf66>
	else if (__tmp > 255)
    33f0:	69 89       	ldd	r22, Y+17	; 0x11
    33f2:	7a 89       	ldd	r23, Y+18	; 0x12
    33f4:	8b 89       	ldd	r24, Y+19	; 0x13
    33f6:	9c 89       	ldd	r25, Y+20	; 0x14
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4f e7       	ldi	r20, 0x7F	; 127
    33fe:	53 e4       	ldi	r21, 0x43	; 67
    3400:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3404:	18 16       	cp	r1, r24
    3406:	0c f0       	brlt	.+2      	; 0x340a <LCD_displayCharacter+0xe5e>
    3408:	7b c0       	rjmp	.+246    	; 0x3500 <LCD_displayCharacter+0xf54>
	{
		_delay_ms(__us / 1000.0);
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	4a e7       	ldi	r20, 0x7A	; 122
    3418:	54 e4       	ldi	r21, 0x44	; 68
    341a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	8c 87       	std	Y+12, r24	; 0x0c
    3424:	9d 87       	std	Y+13, r25	; 0x0d
    3426:	ae 87       	std	Y+14, r26	; 0x0e
    3428:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342a:	6c 85       	ldd	r22, Y+12	; 0x0c
    342c:	7d 85       	ldd	r23, Y+13	; 0x0d
    342e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3430:	9f 85       	ldd	r25, Y+15	; 0x0f
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	4a e7       	ldi	r20, 0x7A	; 122
    3438:	55 e4       	ldi	r21, 0x45	; 69
    343a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	88 87       	std	Y+8, r24	; 0x08
    3444:	99 87       	std	Y+9, r25	; 0x09
    3446:	aa 87       	std	Y+10, r26	; 0x0a
    3448:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    344a:	68 85       	ldd	r22, Y+8	; 0x08
    344c:	79 85       	ldd	r23, Y+9	; 0x09
    344e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3450:	9b 85       	ldd	r25, Y+11	; 0x0b
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e8       	ldi	r20, 0x80	; 128
    3458:	5f e3       	ldi	r21, 0x3F	; 63
    345a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    345e:	88 23       	and	r24, r24
    3460:	2c f4       	brge	.+10     	; 0x346c <LCD_displayCharacter+0xec0>
		__ticks = 1;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9f 83       	std	Y+7, r25	; 0x07
    3468:	8e 83       	std	Y+6, r24	; 0x06
    346a:	3f c0       	rjmp	.+126    	; 0x34ea <LCD_displayCharacter+0xf3e>
	else if (__tmp > 65535)
    346c:	68 85       	ldd	r22, Y+8	; 0x08
    346e:	79 85       	ldd	r23, Y+9	; 0x09
    3470:	8a 85       	ldd	r24, Y+10	; 0x0a
    3472:	9b 85       	ldd	r25, Y+11	; 0x0b
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	3f ef       	ldi	r19, 0xFF	; 255
    3478:	4f e7       	ldi	r20, 0x7F	; 127
    347a:	57 e4       	ldi	r21, 0x47	; 71
    347c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3480:	18 16       	cp	r1, r24
    3482:	4c f5       	brge	.+82     	; 0x34d6 <LCD_displayCharacter+0xf2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3484:	6c 85       	ldd	r22, Y+12	; 0x0c
    3486:	7d 85       	ldd	r23, Y+13	; 0x0d
    3488:	8e 85       	ldd	r24, Y+14	; 0x0e
    348a:	9f 85       	ldd	r25, Y+15	; 0x0f
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e2       	ldi	r20, 0x20	; 32
    3492:	51 e4       	ldi	r21, 0x41	; 65
    3494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9f 83       	std	Y+7, r25	; 0x07
    34aa:	8e 83       	std	Y+6, r24	; 0x06
    34ac:	0f c0       	rjmp	.+30     	; 0x34cc <LCD_displayCharacter+0xf20>
    34ae:	80 e9       	ldi	r24, 0x90	; 144
    34b0:	91 e0       	ldi	r25, 0x01	; 1
    34b2:	9d 83       	std	Y+5, r25	; 0x05
    34b4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34b6:	8c 81       	ldd	r24, Y+4	; 0x04
    34b8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <LCD_displayCharacter+0xf0e>
    34be:	9d 83       	std	Y+5, r25	; 0x05
    34c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	9f 83       	std	Y+7, r25	; 0x07
    34ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34cc:	8e 81       	ldd	r24, Y+6	; 0x06
    34ce:	9f 81       	ldd	r25, Y+7	; 0x07
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	69 f7       	brne	.-38     	; 0x34ae <LCD_displayCharacter+0xf02>
    34d4:	24 c0       	rjmp	.+72     	; 0x351e <LCD_displayCharacter+0xf72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d6:	68 85       	ldd	r22, Y+8	; 0x08
    34d8:	79 85       	ldd	r23, Y+9	; 0x09
    34da:	8a 85       	ldd	r24, Y+10	; 0x0a
    34dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    34de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	9f 83       	std	Y+7, r25	; 0x07
    34e8:	8e 83       	std	Y+6, r24	; 0x06
    34ea:	8e 81       	ldd	r24, Y+6	; 0x06
    34ec:	9f 81       	ldd	r25, Y+7	; 0x07
    34ee:	9b 83       	std	Y+3, r25	; 0x03
    34f0:	8a 83       	std	Y+2, r24	; 0x02
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
    34f4:	9b 81       	ldd	r25, Y+3	; 0x03
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <LCD_displayCharacter+0xf4a>
    34fa:	9b 83       	std	Y+3, r25	; 0x03
    34fc:	8a 83       	std	Y+2, r24	; 0x02
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <LCD_displayCharacter+0xf72>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3500:	69 89       	ldd	r22, Y+17	; 0x11
    3502:	7a 89       	ldd	r23, Y+18	; 0x12
    3504:	8b 89       	ldd	r24, Y+19	; 0x13
    3506:	9c 89       	ldd	r25, Y+20	; 0x14
    3508:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	88 8b       	std	Y+16, r24	; 0x10
    3512:	88 89       	ldd	r24, Y+16	; 0x10
    3514:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	8a 95       	dec	r24
    351a:	f1 f7       	brne	.-4      	; 0x3518 <LCD_displayCharacter+0xf6c>
    351c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    351e:	c7 55       	subi	r28, 0x57	; 87
    3520:	df 4f       	sbci	r29, 0xFF	; 255
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	08 95       	ret

00003536 <LCD_init>:

/*
 * Function to initialize the LCD
 */
void LCD_init(void)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	2e 97       	sbiw	r28, 0x0e	; 14
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	41 e0       	ldi	r20, 0x01	; 1
    3550:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	62 e0       	ldi	r22, 0x02	; 2
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	a0 ea       	ldi	r26, 0xA0	; 160
    3564:	b1 e4       	ldi	r27, 0x41	; 65
    3566:	8b 87       	std	Y+11, r24	; 0x0b
    3568:	9c 87       	std	Y+12, r25	; 0x0c
    356a:	ad 87       	std	Y+13, r26	; 0x0d
    356c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    356e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3570:	7c 85       	ldd	r23, Y+12	; 0x0c
    3572:	8d 85       	ldd	r24, Y+13	; 0x0d
    3574:	9e 85       	ldd	r25, Y+14	; 0x0e
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	4a e7       	ldi	r20, 0x7A	; 122
    357c:	55 e4       	ldi	r21, 0x45	; 69
    357e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	8f 83       	std	Y+7, r24	; 0x07
    3588:	98 87       	std	Y+8, r25	; 0x08
    358a:	a9 87       	std	Y+9, r26	; 0x09
    358c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    358e:	6f 81       	ldd	r22, Y+7	; 0x07
    3590:	78 85       	ldd	r23, Y+8	; 0x08
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	9a 85       	ldd	r25, Y+10	; 0x0a
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e8       	ldi	r20, 0x80	; 128
    359c:	5f e3       	ldi	r21, 0x3F	; 63
    359e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    35a2:	88 23       	and	r24, r24
    35a4:	2c f4       	brge	.+10     	; 0x35b0 <LCD_init+0x7a>
		__ticks = 1;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
    35ae:	3f c0       	rjmp	.+126    	; 0x362e <LCD_init+0xf8>
	else if (__tmp > 65535)
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	3f ef       	ldi	r19, 0xFF	; 255
    35bc:	4f e7       	ldi	r20, 0x7F	; 127
    35be:	57 e4       	ldi	r21, 0x47	; 71
    35c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    35c4:	18 16       	cp	r1, r24
    35c6:	4c f5       	brge	.+82     	; 0x361a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    35cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e2       	ldi	r20, 0x20	; 32
    35d6:	51 e4       	ldi	r21, 0x41	; 65
    35d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9e 83       	std	Y+6, r25	; 0x06
    35ee:	8d 83       	std	Y+5, r24	; 0x05
    35f0:	0f c0       	rjmp	.+30     	; 0x3610 <LCD_init+0xda>
    35f2:	80 e9       	ldi	r24, 0x90	; 144
    35f4:	91 e0       	ldi	r25, 0x01	; 1
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	f1 f7       	brne	.-4      	; 0x35fe <LCD_init+0xc8>
    3602:	9c 83       	std	Y+4, r25	; 0x04
    3604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3606:	8d 81       	ldd	r24, Y+5	; 0x05
    3608:	9e 81       	ldd	r25, Y+6	; 0x06
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	9e 83       	std	Y+6, r25	; 0x06
    360e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	00 97       	sbiw	r24, 0x00	; 0
    3616:	69 f7       	brne	.-38     	; 0x35f2 <LCD_init+0xbc>
    3618:	14 c0       	rjmp	.+40     	; 0x3642 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361a:	6f 81       	ldd	r22, Y+7	; 0x07
    361c:	78 85       	ldd	r23, Y+8	; 0x08
    361e:	89 85       	ldd	r24, Y+9	; 0x09
    3620:	9a 85       	ldd	r25, Y+10	; 0x0a
    3622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	9e 83       	std	Y+6, r25	; 0x06
    362c:	8d 83       	std	Y+5, r24	; 0x05
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <LCD_init+0x104>
    363e:	9a 83       	std	Y+2, r25	; 0x02
    3640:	89 83       	std	Y+1, r24	; 0x01
        /* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_8BIT);
    #elif (LCD_BIT_MODE == 4)

        /* Configure 4 pins in the data port as output pins */
        GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID, PIN_OUTPUT);
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	63 e0       	ldi	r22, 0x03	; 3
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
        GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 1, PIN_OUTPUT);
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	64 e0       	ldi	r22, 0x04	; 4
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
        GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 2, PIN_OUTPUT);
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	65 e0       	ldi	r22, 0x05	; 5
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>
        GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID + 3, PIN_OUTPUT);
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	66 e0       	ldi	r22, 0x06	; 6
    3664:	41 e0       	ldi	r20, 0x01	; 1
    3666:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_setupPinDirection>

        LCD_SendCommand(LCD_4BIT);	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
    366a:	88 e2       	ldi	r24, 0x28	; 40
    366c:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
        LCD_SendCommand(LCD_4BIT1);	/* Send for 4 bit initialization of LCD  */
    3670:	83 e3       	ldi	r24, 0x33	; 51
    3672:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
        LCD_SendCommand(LCD_4BIT2);
    3676:	82 e3       	ldi	r24, 0x32	; 50
    3678:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
    #endif

    LCD_SendCommand(LCD_CURSOR_OFF);		/* cursor off */
    367c:	8c e0       	ldi	r24, 0x0C	; 12
    367e:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
    LCD_SendCommand(LCD_CLEAR_COMMAND);		/* clear LCD at the beginning */
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
}
    3688:	2e 96       	adiw	r28, 0x0e	; 14
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <LCD_displayString>:

/*
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <LCD_displayString+0x6>
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	9b 83       	std	Y+3, r25	; 0x03
    36a8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    36aa:	19 82       	std	Y+1, r1	; 0x01
    36ac:	0e c0       	rjmp	.+28     	; 0x36ca <LCD_displayString+0x30>
    while (string[i] != '\0')
    {
        LCD_displayCharacter(string[i]);
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	28 2f       	mov	r18, r24
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	9b 81       	ldd	r25, Y+3	; 0x03
    36b8:	fc 01       	movw	r30, r24
    36ba:	e2 0f       	add	r30, r18
    36bc:	f3 1f       	adc	r31, r19
    36be:	80 81       	ld	r24, Z
    36c0:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
        i++;
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	8f 5f       	subi	r24, 0xFF	; 255
    36c8:	89 83       	std	Y+1, r24	; 0x01
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    uint8 i = 0;
    while (string[i] != '\0')
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	9b 81       	ldd	r25, Y+3	; 0x03
    36d4:	fc 01       	movw	r30, r24
    36d6:	e2 0f       	add	r30, r18
    36d8:	f3 1f       	adc	r31, r19
    36da:	80 81       	ld	r24, Z
    36dc:	88 23       	and	r24, r24
    36de:	39 f7       	brne	.-50     	; 0x36ae <LCD_displayString+0x14>
    {
        LCD_displayCharacter(string[i]);
        i++;
    }
}
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <LCD_moveCursor>:

/*
 * Function to move the cursor to a specific row and column on the LCD
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	6d 97       	sbiw	r28, 0x1d	; 29
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	8a 8f       	std	Y+26, r24	; 0x1a
    3702:	6b 8f       	std	Y+27, r22	; 0x1b
    uint8 address;
    switch (row)
    3704:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3706:	28 2f       	mov	r18, r24
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	3d 8f       	std	Y+29, r19	; 0x1d
    370c:	2c 8f       	std	Y+28, r18	; 0x1c
    370e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3710:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	91 05       	cpc	r25, r1
    3716:	c1 f0       	breq	.+48     	; 0x3748 <LCD_moveCursor+0x5c>
    3718:	2c 8d       	ldd	r18, Y+28	; 0x1c
    371a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    371c:	22 30       	cpi	r18, 0x02	; 2
    371e:	31 05       	cpc	r19, r1
    3720:	2c f4       	brge	.+10     	; 0x372c <LCD_moveCursor+0x40>
    3722:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3724:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3726:	00 97       	sbiw	r24, 0x00	; 0
    3728:	61 f0       	breq	.+24     	; 0x3742 <LCD_moveCursor+0x56>
    372a:	19 c0       	rjmp	.+50     	; 0x375e <LCD_moveCursor+0x72>
    372c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    372e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3730:	22 30       	cpi	r18, 0x02	; 2
    3732:	31 05       	cpc	r19, r1
    3734:	69 f0       	breq	.+26     	; 0x3750 <LCD_moveCursor+0x64>
    3736:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3738:	9d 8d       	ldd	r25, Y+29	; 0x1d
    373a:	83 30       	cpi	r24, 0x03	; 3
    373c:	91 05       	cpc	r25, r1
    373e:	61 f0       	breq	.+24     	; 0x3758 <LCD_moveCursor+0x6c>
    3740:	0e c0       	rjmp	.+28     	; 0x375e <LCD_moveCursor+0x72>
    {
    case 0:
        address = col;
    3742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3744:	89 8f       	std	Y+25, r24	; 0x19
    3746:	0b c0       	rjmp	.+22     	; 0x375e <LCD_moveCursor+0x72>
        break;
    case 1:
        address = col + 0x40;
    3748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    374a:	80 5c       	subi	r24, 0xC0	; 192
    374c:	89 8f       	std	Y+25, r24	; 0x19
    374e:	07 c0       	rjmp	.+14     	; 0x375e <LCD_moveCursor+0x72>
        break;
    case 2:
        address = col + 0x10;
    3750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3752:	80 5f       	subi	r24, 0xF0	; 240
    3754:	89 8f       	std	Y+25, r24	; 0x19
    3756:	03 c0       	rjmp	.+6      	; 0x375e <LCD_moveCursor+0x72>
        break;
    case 3:
        address = col + 0x50;
    3758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375a:	80 5b       	subi	r24, 0xB0	; 176
    375c:	89 8f       	std	Y+25, r24	; 0x19
        break;
    }
    LCD_SendCommand(address | LCD_MOVE_CURSOR);
    375e:	89 8d       	ldd	r24, Y+25	; 0x19
    3760:	80 68       	ori	r24, 0x80	; 128
    3762:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	a0 e0       	ldi	r26, 0x00	; 0
    376c:	b0 e4       	ldi	r27, 0x40	; 64
    376e:	8d 8b       	std	Y+21, r24	; 0x15
    3770:	9e 8b       	std	Y+22, r25	; 0x16
    3772:	af 8b       	std	Y+23, r26	; 0x17
    3774:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3776:	6d 89       	ldd	r22, Y+21	; 0x15
    3778:	7e 89       	ldd	r23, Y+22	; 0x16
    377a:	8f 89       	ldd	r24, Y+23	; 0x17
    377c:	98 8d       	ldd	r25, Y+24	; 0x18
    377e:	2b ea       	ldi	r18, 0xAB	; 171
    3780:	3a ea       	ldi	r19, 0xAA	; 170
    3782:	4a ea       	ldi	r20, 0xAA	; 170
    3784:	50 e4       	ldi	r21, 0x40	; 64
    3786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	89 8b       	std	Y+17, r24	; 0x11
    3790:	9a 8b       	std	Y+18, r25	; 0x12
    3792:	ab 8b       	std	Y+19, r26	; 0x13
    3794:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3796:	69 89       	ldd	r22, Y+17	; 0x11
    3798:	7a 89       	ldd	r23, Y+18	; 0x12
    379a:	8b 89       	ldd	r24, Y+19	; 0x13
    379c:	9c 89       	ldd	r25, Y+20	; 0x14
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e8       	ldi	r20, 0x80	; 128
    37a4:	5f e3       	ldi	r21, 0x3F	; 63
    37a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    37aa:	88 23       	and	r24, r24
    37ac:	1c f4       	brge	.+6      	; 0x37b4 <LCD_moveCursor+0xc8>
		__ticks = 1;
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	88 8b       	std	Y+16, r24	; 0x10
    37b2:	91 c0       	rjmp	.+290    	; 0x38d6 <LCD_moveCursor+0x1ea>
	else if (__tmp > 255)
    37b4:	69 89       	ldd	r22, Y+17	; 0x11
    37b6:	7a 89       	ldd	r23, Y+18	; 0x12
    37b8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ba:	9c 89       	ldd	r25, Y+20	; 0x14
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	4f e7       	ldi	r20, 0x7F	; 127
    37c2:	53 e4       	ldi	r21, 0x43	; 67
    37c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    37c8:	18 16       	cp	r1, r24
    37ca:	0c f0       	brlt	.+2      	; 0x37ce <LCD_moveCursor+0xe2>
    37cc:	7b c0       	rjmp	.+246    	; 0x38c4 <LCD_moveCursor+0x1d8>
	{
		_delay_ms(__us / 1000.0);
    37ce:	6d 89       	ldd	r22, Y+21	; 0x15
    37d0:	7e 89       	ldd	r23, Y+22	; 0x16
    37d2:	8f 89       	ldd	r24, Y+23	; 0x17
    37d4:	98 8d       	ldd	r25, Y+24	; 0x18
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	4a e7       	ldi	r20, 0x7A	; 122
    37dc:	54 e4       	ldi	r21, 0x44	; 68
    37de:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	8c 87       	std	Y+12, r24	; 0x0c
    37e8:	9d 87       	std	Y+13, r25	; 0x0d
    37ea:	ae 87       	std	Y+14, r26	; 0x0e
    37ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    37f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    37f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    37f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	4a e7       	ldi	r20, 0x7A	; 122
    37fc:	55 e4       	ldi	r21, 0x45	; 69
    37fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	88 87       	std	Y+8, r24	; 0x08
    3808:	99 87       	std	Y+9, r25	; 0x09
    380a:	aa 87       	std	Y+10, r26	; 0x0a
    380c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    380e:	68 85       	ldd	r22, Y+8	; 0x08
    3810:	79 85       	ldd	r23, Y+9	; 0x09
    3812:	8a 85       	ldd	r24, Y+10	; 0x0a
    3814:	9b 85       	ldd	r25, Y+11	; 0x0b
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e8       	ldi	r20, 0x80	; 128
    381c:	5f e3       	ldi	r21, 0x3F	; 63
    381e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3822:	88 23       	and	r24, r24
    3824:	2c f4       	brge	.+10     	; 0x3830 <LCD_moveCursor+0x144>
		__ticks = 1;
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	9f 83       	std	Y+7, r25	; 0x07
    382c:	8e 83       	std	Y+6, r24	; 0x06
    382e:	3f c0       	rjmp	.+126    	; 0x38ae <LCD_moveCursor+0x1c2>
	else if (__tmp > 65535)
    3830:	68 85       	ldd	r22, Y+8	; 0x08
    3832:	79 85       	ldd	r23, Y+9	; 0x09
    3834:	8a 85       	ldd	r24, Y+10	; 0x0a
    3836:	9b 85       	ldd	r25, Y+11	; 0x0b
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	3f ef       	ldi	r19, 0xFF	; 255
    383c:	4f e7       	ldi	r20, 0x7F	; 127
    383e:	57 e4       	ldi	r21, 0x47	; 71
    3840:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3844:	18 16       	cp	r1, r24
    3846:	4c f5       	brge	.+82     	; 0x389a <LCD_moveCursor+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3848:	6c 85       	ldd	r22, Y+12	; 0x0c
    384a:	7d 85       	ldd	r23, Y+13	; 0x0d
    384c:	8e 85       	ldd	r24, Y+14	; 0x0e
    384e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e2       	ldi	r20, 0x20	; 32
    3856:	51 e4       	ldi	r21, 0x41	; 65
    3858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	bc 01       	movw	r22, r24
    3862:	cd 01       	movw	r24, r26
    3864:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	9f 83       	std	Y+7, r25	; 0x07
    386e:	8e 83       	std	Y+6, r24	; 0x06
    3870:	0f c0       	rjmp	.+30     	; 0x3890 <LCD_moveCursor+0x1a4>
    3872:	80 e9       	ldi	r24, 0x90	; 144
    3874:	91 e0       	ldi	r25, 0x01	; 1
    3876:	9d 83       	std	Y+5, r25	; 0x05
    3878:	8c 83       	std	Y+4, r24	; 0x04
    387a:	8c 81       	ldd	r24, Y+4	; 0x04
    387c:	9d 81       	ldd	r25, Y+5	; 0x05
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	f1 f7       	brne	.-4      	; 0x387e <LCD_moveCursor+0x192>
    3882:	9d 83       	std	Y+5, r25	; 0x05
    3884:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3886:	8e 81       	ldd	r24, Y+6	; 0x06
    3888:	9f 81       	ldd	r25, Y+7	; 0x07
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	9f 83       	std	Y+7, r25	; 0x07
    388e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3890:	8e 81       	ldd	r24, Y+6	; 0x06
    3892:	9f 81       	ldd	r25, Y+7	; 0x07
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	69 f7       	brne	.-38     	; 0x3872 <LCD_moveCursor+0x186>
    3898:	24 c0       	rjmp	.+72     	; 0x38e2 <LCD_moveCursor+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389a:	68 85       	ldd	r22, Y+8	; 0x08
    389c:	79 85       	ldd	r23, Y+9	; 0x09
    389e:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	9f 83       	std	Y+7, r25	; 0x07
    38ac:	8e 83       	std	Y+6, r24	; 0x06
    38ae:	8e 81       	ldd	r24, Y+6	; 0x06
    38b0:	9f 81       	ldd	r25, Y+7	; 0x07
    38b2:	9b 83       	std	Y+3, r25	; 0x03
    38b4:	8a 83       	std	Y+2, r24	; 0x02
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	9b 81       	ldd	r25, Y+3	; 0x03
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <LCD_moveCursor+0x1ce>
    38be:	9b 83       	std	Y+3, r25	; 0x03
    38c0:	8a 83       	std	Y+2, r24	; 0x02
    38c2:	0f c0       	rjmp	.+30     	; 0x38e2 <LCD_moveCursor+0x1f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38c4:	69 89       	ldd	r22, Y+17	; 0x11
    38c6:	7a 89       	ldd	r23, Y+18	; 0x12
    38c8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ca:	9c 89       	ldd	r25, Y+20	; 0x14
    38cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	88 8b       	std	Y+16, r24	; 0x10
    38d6:	88 89       	ldd	r24, Y+16	; 0x10
    38d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	8a 95       	dec	r24
    38de:	f1 f7       	brne	.-4      	; 0x38dc <LCD_moveCursor+0x1f0>
    38e0:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    38e2:	6d 96       	adiw	r28, 0x1d	; 29
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <LCD_displaySringRowColumn>:

/*
 * Function to display a string at a specific row and column on the LCD
 */
void LCD_displaySringRowColumn(const char* string, uint8 row, uint8 col)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	00 d0       	rcall	.+0      	; 0x38fa <LCD_displaySringRowColumn+0x6>
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <LCD_displaySringRowColumn+0x8>
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	9a 83       	std	Y+2, r25	; 0x02
    3902:	89 83       	std	Y+1, r24	; 0x01
    3904:	6b 83       	std	Y+3, r22	; 0x03
    3906:	4c 83       	std	Y+4, r20	; 0x04
    LCD_moveCursor(row, col);
    3908:	8b 81       	ldd	r24, Y+3	; 0x03
    390a:	6c 81       	ldd	r22, Y+4	; 0x04
    390c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <LCD_moveCursor>
    LCD_displayString(string);
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	0e 94 4d 1b 	call	0x369a	; 0x369a <LCD_displayString>
}
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <LCD_clearScreen>:

/*
 * Function to clear the LCD screen
 */
void LCD_clearScreen(void)
{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_CLEAR_COMMAND);
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_SendCommand>
}
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <LCD_intgerToString>:

/*
 * Function to convert an integer to a string and display it on the LCD
 */
void LCD_intgerToString(int data)
{
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	62 97       	sbiw	r28, 0x12	; 18
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	9a 8b       	std	Y+18, r25	; 0x12
    3950:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data, buff, 10);
    3952:	89 89       	ldd	r24, Y+17	; 0x11
    3954:	9a 89       	ldd	r25, Y+18	; 0x12
    3956:	9e 01       	movw	r18, r28
    3958:	2f 5f       	subi	r18, 0xFF	; 255
    395a:	3f 4f       	sbci	r19, 0xFF	; 255
    395c:	b9 01       	movw	r22, r18
    395e:	4a e0       	ldi	r20, 0x0A	; 10
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <itoa>
   LCD_displayString(buff);
    3966:	ce 01       	movw	r24, r28
    3968:	01 96       	adiw	r24, 0x01	; 1
    396a:	0e 94 4d 1b 	call	0x369a	; 0x369a <LCD_displayString>
}
    396e:	62 96       	adiw	r28, 0x12	; 18
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <main>:
#include "lcd.h"
#include "keypad.h"
#include <util/delay.h>

int main (void)
{
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	69 97       	sbiw	r28, 0x19	; 25
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
    /* Initialize the LCD module */
	LCD_init();
    3994:	0e 94 9b 1a 	call	0x3536	; 0x3536 <LCD_init>

	uint16 num1 = 0, num2 = 0; /* Initialize variables for operands */
    3998:	1d 8a       	std	Y+21, r1	; 0x15
    399a:	1c 8a       	std	Y+20, r1	; 0x14
    399c:	1b 8a       	std	Y+19, r1	; 0x13
    399e:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 opert = 0, clear = 0; /* Initialize variables for operator and clearing the screen */
    39a0:	19 8a       	std	Y+17, r1	; 0x11
    39a2:	18 8a       	std	Y+16, r1	; 0x10

	while (1)
	{
		uint8 key = KEYPAD_getPressedKey(); /* Get the pressed key from the keypad */
    39a4:	0e 94 85 09 	call	0x130a	; 0x130a <KEYPAD_getPressedKey>
    39a8:	8f 87       	std	Y+15, r24	; 0x0f

		if (clear)
    39aa:	88 89       	ldd	r24, Y+16	; 0x10
    39ac:	88 23       	and	r24, r24
    39ae:	41 f0       	breq	.+16     	; 0x39c0 <main+0x40>
		{
			clear = 0; /* Reset clear flag */
    39b0:	18 8a       	std	Y+16, r1	; 0x10
			opert = 0; /* Reset operator */
    39b2:	19 8a       	std	Y+17, r1	; 0x11
			num1 = 0; /* Reset first operand */
    39b4:	1d 8a       	std	Y+21, r1	; 0x15
    39b6:	1c 8a       	std	Y+20, r1	; 0x14
			num2 = 0; /* Reset second operand */
    39b8:	1b 8a       	std	Y+19, r1	; 0x13
    39ba:	1a 8a       	std	Y+18, r1	; 0x12
			LCD_clearScreen(); /* Clear the LCD screen */
    39bc:	0e 94 93 1c 	call	0x3926	; 0x3926 <LCD_clearScreen>
		}

		if (key >= '*' && key <= '/') /* Check if the key corresponds to an operator */
    39c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c2:	8a 32       	cpi	r24, 0x2A	; 42
    39c4:	d8 f1       	brcs	.+118    	; 0x3a3c <main+0xbc>
    39c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c8:	80 33       	cpi	r24, 0x30	; 48
    39ca:	c0 f5       	brcc	.+112    	; 0x3a3c <main+0xbc>
		switch (key)
    39cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ce:	28 2f       	mov	r18, r24
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	39 8f       	std	Y+25, r19	; 0x19
    39d4:	28 8f       	std	Y+24, r18	; 0x18
    39d6:	48 8d       	ldd	r20, Y+24	; 0x18
    39d8:	59 8d       	ldd	r21, Y+25	; 0x19
    39da:	4b 32       	cpi	r20, 0x2B	; 43
    39dc:	51 05       	cpc	r21, r1
    39de:	e1 f0       	breq	.+56     	; 0x3a18 <main+0x98>
    39e0:	88 8d       	ldd	r24, Y+24	; 0x18
    39e2:	99 8d       	ldd	r25, Y+25	; 0x19
    39e4:	8c 32       	cpi	r24, 0x2C	; 44
    39e6:	91 05       	cpc	r25, r1
    39e8:	34 f4       	brge	.+12     	; 0x39f6 <main+0x76>
    39ea:	28 8d       	ldd	r18, Y+24	; 0x18
    39ec:	39 8d       	ldd	r19, Y+25	; 0x19
    39ee:	2a 32       	cpi	r18, 0x2A	; 42
    39f0:	31 05       	cpc	r19, r1
    39f2:	61 f0       	breq	.+24     	; 0x3a0c <main+0x8c>
    39f4:	ba c0       	rjmp	.+372    	; 0x3b6a <main+0x1ea>
    39f6:	48 8d       	ldd	r20, Y+24	; 0x18
    39f8:	59 8d       	ldd	r21, Y+25	; 0x19
    39fa:	4d 32       	cpi	r20, 0x2D	; 45
    39fc:	51 05       	cpc	r21, r1
    39fe:	91 f0       	breq	.+36     	; 0x3a24 <main+0xa4>
    3a00:	88 8d       	ldd	r24, Y+24	; 0x18
    3a02:	99 8d       	ldd	r25, Y+25	; 0x19
    3a04:	8f 32       	cpi	r24, 0x2F	; 47
    3a06:	91 05       	cpc	r25, r1
    3a08:	99 f0       	breq	.+38     	; 0x3a30 <main+0xb0>
    3a0a:	af c0       	rjmp	.+350    	; 0x3b6a <main+0x1ea>
		{
			case '*':
				LCD_displayCharacter('*'); /* Display '*' on the LCD */
    3a0c:	8a e2       	ldi	r24, 0x2A	; 42
    3a0e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
				opert = '*'; /* Set operator to multiplication */
    3a12:	8a e2       	ldi	r24, 0x2A	; 42
    3a14:	89 8b       	std	Y+17, r24	; 0x11
    3a16:	a9 c0       	rjmp	.+338    	; 0x3b6a <main+0x1ea>
				break;
			case '+':
				LCD_displayCharacter('+'); /* Display '+' on the LCD */
    3a18:	8b e2       	ldi	r24, 0x2B	; 43
    3a1a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
				opert = '+'; /* Set operator to addition */
    3a1e:	8b e2       	ldi	r24, 0x2B	; 43
    3a20:	89 8b       	std	Y+17, r24	; 0x11
    3a22:	a3 c0       	rjmp	.+326    	; 0x3b6a <main+0x1ea>
				break;
			case '-':
				LCD_displayCharacter('-'); /* Display '-' on the LCD */
    3a24:	8d e2       	ldi	r24, 0x2D	; 45
    3a26:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
				opert = '-'; /* Set operator to subtraction */
    3a2a:	8d e2       	ldi	r24, 0x2D	; 45
    3a2c:	89 8b       	std	Y+17, r24	; 0x11
    3a2e:	9d c0       	rjmp	.+314    	; 0x3b6a <main+0x1ea>
				break;
			case '/':
				LCD_displayCharacter('/'); /* Display '/' on the LCD */
    3a30:	8f e2       	ldi	r24, 0x2F	; 47
    3a32:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
				opert = '/'; /* Set operator to division */
    3a36:	8f e2       	ldi	r24, 0x2F	; 47
    3a38:	89 8b       	std	Y+17, r24	; 0x11
    3a3a:	97 c0       	rjmp	.+302    	; 0x3b6a <main+0x1ea>
				break;
		}

		else if (key >= 0 && key <= 9) /* Check if the key corresponds to a digit */
    3a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a3e:	8a 30       	cpi	r24, 0x0A	; 10
    3a40:	80 f5       	brcc	.+96     	; 0x3aa2 <main+0x122>
		{
			if (opert == 0)
    3a42:	89 89       	ldd	r24, Y+17	; 0x11
    3a44:	88 23       	and	r24, r24
    3a46:	a1 f4       	brne	.+40     	; 0x3a70 <main+0xf0>
			{
				num1 = (num1*10) + key; /* Build first operand */
    3a48:	8c 89       	ldd	r24, Y+20	; 0x14
    3a4a:	9d 89       	ldd	r25, Y+21	; 0x15
    3a4c:	9c 01       	movw	r18, r24
    3a4e:	22 0f       	add	r18, r18
    3a50:	33 1f       	adc	r19, r19
    3a52:	c9 01       	movw	r24, r18
    3a54:	88 0f       	add	r24, r24
    3a56:	99 1f       	adc	r25, r25
    3a58:	88 0f       	add	r24, r24
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	28 0f       	add	r18, r24
    3a5e:	39 1f       	adc	r19, r25
    3a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a62:	88 2f       	mov	r24, r24
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	82 0f       	add	r24, r18
    3a68:	93 1f       	adc	r25, r19
    3a6a:	9d 8b       	std	Y+21, r25	; 0x15
    3a6c:	8c 8b       	std	Y+20, r24	; 0x14
    3a6e:	13 c0       	rjmp	.+38     	; 0x3a96 <main+0x116>
			}
			else
			{
				num2 = (num2*10) + key; /* Build second operand */
    3a70:	8a 89       	ldd	r24, Y+18	; 0x12
    3a72:	9b 89       	ldd	r25, Y+19	; 0x13
    3a74:	9c 01       	movw	r18, r24
    3a76:	22 0f       	add	r18, r18
    3a78:	33 1f       	adc	r19, r19
    3a7a:	c9 01       	movw	r24, r18
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	28 0f       	add	r18, r24
    3a86:	39 1f       	adc	r19, r25
    3a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	82 0f       	add	r24, r18
    3a90:	93 1f       	adc	r25, r19
    3a92:	9b 8b       	std	Y+19, r25	; 0x13
    3a94:	8a 8b       	std	Y+18, r24	; 0x12
			}
			LCD_intgerToString(key); /* Display the digit on the LCD */
    3a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a98:	88 2f       	mov	r24, r24
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_intgerToString>
    3aa0:	64 c0       	rjmp	.+200    	; 0x3b6a <main+0x1ea>
		}
		else if (key == '=') /* Check if the key corresponds to the equals sign */
    3aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa4:	8d 33       	cpi	r24, 0x3D	; 61
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <main+0x12a>
    3aa8:	59 c0       	rjmp	.+178    	; 0x3b5c <main+0x1dc>
		{
			LCD_displayCharacter('='); /* Display '=' on the LCD */
    3aaa:	8d e3       	ldi	r24, 0x3D	; 61
    3aac:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
			switch (opert) /* Perform operation based on the operator */
    3ab0:	89 89       	ldd	r24, Y+17	; 0x11
    3ab2:	28 2f       	mov	r18, r24
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	3f 8b       	std	Y+23, r19	; 0x17
    3ab8:	2e 8b       	std	Y+22, r18	; 0x16
    3aba:	4e 89       	ldd	r20, Y+22	; 0x16
    3abc:	5f 89       	ldd	r21, Y+23	; 0x17
    3abe:	4b 32       	cpi	r20, 0x2B	; 43
    3ac0:	51 05       	cpc	r21, r1
    3ac2:	39 f1       	breq	.+78     	; 0x3b12 <main+0x192>
    3ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    3ac6:	9f 89       	ldd	r25, Y+23	; 0x17
    3ac8:	8c 32       	cpi	r24, 0x2C	; 44
    3aca:	91 05       	cpc	r25, r1
    3acc:	34 f4       	brge	.+12     	; 0x3ada <main+0x15a>
    3ace:	2e 89       	ldd	r18, Y+22	; 0x16
    3ad0:	3f 89       	ldd	r19, Y+23	; 0x17
    3ad2:	2a 32       	cpi	r18, 0x2A	; 42
    3ad4:	31 05       	cpc	r19, r1
    3ad6:	61 f0       	breq	.+24     	; 0x3af0 <main+0x170>
    3ad8:	48 c0       	rjmp	.+144    	; 0x3b6a <main+0x1ea>
    3ada:	4e 89       	ldd	r20, Y+22	; 0x16
    3adc:	5f 89       	ldd	r21, Y+23	; 0x17
    3ade:	4d 32       	cpi	r20, 0x2D	; 45
    3ae0:	51 05       	cpc	r21, r1
    3ae2:	11 f1       	breq	.+68     	; 0x3b28 <main+0x1a8>
    3ae4:	8e 89       	ldd	r24, Y+22	; 0x16
    3ae6:	9f 89       	ldd	r25, Y+23	; 0x17
    3ae8:	8f 32       	cpi	r24, 0x2F	; 47
    3aea:	91 05       	cpc	r25, r1
    3aec:	51 f1       	breq	.+84     	; 0x3b42 <main+0x1c2>
    3aee:	3d c0       	rjmp	.+122    	; 0x3b6a <main+0x1ea>
			{
				case '*':
					LCD_intgerToString(num1 * num2); /* Display the result of multiplication */
    3af0:	2c 89       	ldd	r18, Y+20	; 0x14
    3af2:	3d 89       	ldd	r19, Y+21	; 0x15
    3af4:	8a 89       	ldd	r24, Y+18	; 0x12
    3af6:	9b 89       	ldd	r25, Y+19	; 0x13
    3af8:	ac 01       	movw	r20, r24
    3afa:	24 9f       	mul	r18, r20
    3afc:	c0 01       	movw	r24, r0
    3afe:	25 9f       	mul	r18, r21
    3b00:	90 0d       	add	r25, r0
    3b02:	34 9f       	mul	r19, r20
    3b04:	90 0d       	add	r25, r0
    3b06:	11 24       	eor	r1, r1
    3b08:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_intgerToString>
					clear = 1; /* Set clear flag to clear the screen */
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	88 8b       	std	Y+16, r24	; 0x10
    3b10:	2c c0       	rjmp	.+88     	; 0x3b6a <main+0x1ea>
					break;
				case '+':
					LCD_intgerToString(num1 + num2); /* Display the result of addition */
    3b12:	2c 89       	ldd	r18, Y+20	; 0x14
    3b14:	3d 89       	ldd	r19, Y+21	; 0x15
    3b16:	8a 89       	ldd	r24, Y+18	; 0x12
    3b18:	9b 89       	ldd	r25, Y+19	; 0x13
    3b1a:	82 0f       	add	r24, r18
    3b1c:	93 1f       	adc	r25, r19
    3b1e:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_intgerToString>
					clear = 1; /* Set clear flag to clear the screen */
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	88 8b       	std	Y+16, r24	; 0x10
    3b26:	21 c0       	rjmp	.+66     	; 0x3b6a <main+0x1ea>
					break;
				case '-':
					LCD_intgerToString(num1 - num2); /* Display the result of subtraction */
    3b28:	2c 89       	ldd	r18, Y+20	; 0x14
    3b2a:	3d 89       	ldd	r19, Y+21	; 0x15
    3b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    3b2e:	9b 89       	ldd	r25, Y+19	; 0x13
    3b30:	a9 01       	movw	r20, r18
    3b32:	48 1b       	sub	r20, r24
    3b34:	59 0b       	sbc	r21, r25
    3b36:	ca 01       	movw	r24, r20
    3b38:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_intgerToString>
					clear = 1; /* Set clear flag to clear the screen */
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	88 8b       	std	Y+16, r24	; 0x10
    3b40:	14 c0       	rjmp	.+40     	; 0x3b6a <main+0x1ea>
					break;
				case '/':
					LCD_intgerToString(num1 / num2); /* Display the result of division */
    3b42:	8c 89       	ldd	r24, Y+20	; 0x14
    3b44:	9d 89       	ldd	r25, Y+21	; 0x15
    3b46:	2a 89       	ldd	r18, Y+18	; 0x12
    3b48:	3b 89       	ldd	r19, Y+19	; 0x13
    3b4a:	b9 01       	movw	r22, r18
    3b4c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodhi4>
    3b50:	cb 01       	movw	r24, r22
    3b52:	0e 94 9d 1c 	call	0x393a	; 0x393a <LCD_intgerToString>
					clear = 1; /* Set clear flag to clear the screen */
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	88 8b       	std	Y+16, r24	; 0x10
    3b5a:	07 c0       	rjmp	.+14     	; 0x3b6a <main+0x1ea>
					break;
			}

		}
		else if (key == 13) /* Check if the key corresponds to the clear key */
    3b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b5e:	8d 30       	cpi	r24, 0x0D	; 13
    3b60:	21 f4       	brne	.+8      	; 0x3b6a <main+0x1ea>
		{
			LCD_clearScreen(); /* Clear the LCD screen */
    3b62:	0e 94 93 1c 	call	0x3926	; 0x3926 <LCD_clearScreen>
			clear = 1; /* Set clear flag to clear the screen */
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	88 8b       	std	Y+16, r24	; 0x10
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	aa ef       	ldi	r26, 0xFA	; 250
    3b70:	b3 e4       	ldi	r27, 0x43	; 67
    3b72:	8b 87       	std	Y+11, r24	; 0x0b
    3b74:	9c 87       	std	Y+12, r25	; 0x0c
    3b76:	ad 87       	std	Y+13, r26	; 0x0d
    3b78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	4a e7       	ldi	r20, 0x7A	; 122
    3b88:	55 e4       	ldi	r21, 0x45	; 69
    3b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	8f 83       	std	Y+7, r24	; 0x07
    3b94:	98 87       	std	Y+8, r25	; 0x08
    3b96:	a9 87       	std	Y+9, r26	; 0x09
    3b98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9c:	78 85       	ldd	r23, Y+8	; 0x08
    3b9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e8       	ldi	r20, 0x80	; 128
    3ba8:	5f e3       	ldi	r21, 0x3F	; 63
    3baa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3bae:	88 23       	and	r24, r24
    3bb0:	2c f4       	brge	.+10     	; 0x3bbc <main+0x23c>
		__ticks = 1;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	9e 83       	std	Y+6, r25	; 0x06
    3bb8:	8d 83       	std	Y+5, r24	; 0x05
    3bba:	3f c0       	rjmp	.+126    	; 0x3c3a <main+0x2ba>
	else if (__tmp > 65535)
    3bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bbe:	78 85       	ldd	r23, Y+8	; 0x08
    3bc0:	89 85       	ldd	r24, Y+9	; 0x09
    3bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	3f ef       	ldi	r19, 0xFF	; 255
    3bc8:	4f e7       	ldi	r20, 0x7F	; 127
    3bca:	57 e4       	ldi	r21, 0x47	; 71
    3bcc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3bd0:	18 16       	cp	r1, r24
    3bd2:	4c f5       	brge	.+82     	; 0x3c26 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e2       	ldi	r20, 0x20	; 32
    3be2:	51 e4       	ldi	r21, 0x41	; 65
    3be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
    3bfc:	0f c0       	rjmp	.+30     	; 0x3c1c <main+0x29c>
    3bfe:	80 e9       	ldi	r24, 0x90	; 144
    3c00:	91 e0       	ldi	r25, 0x01	; 1
    3c02:	9c 83       	std	Y+4, r25	; 0x04
    3c04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <main+0x28a>
    3c0e:	9c 83       	std	Y+4, r25	; 0x04
    3c10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c12:	8d 81       	ldd	r24, Y+5	; 0x05
    3c14:	9e 81       	ldd	r25, Y+6	; 0x06
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	9e 83       	std	Y+6, r25	; 0x06
    3c1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	69 f7       	brne	.-38     	; 0x3bfe <main+0x27e>
    3c24:	bf ce       	rjmp	.-642    	; 0x39a4 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c26:	6f 81       	ldd	r22, Y+7	; 0x07
    3c28:	78 85       	ldd	r23, Y+8	; 0x08
    3c2a:	89 85       	ldd	r24, Y+9	; 0x09
    3c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	9e 83       	std	Y+6, r25	; 0x06
    3c38:	8d 83       	std	Y+5, r24	; 0x05
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3e:	9a 83       	std	Y+2, r25	; 0x02
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	9a 81       	ldd	r25, Y+2	; 0x02
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f1 f7       	brne	.-4      	; 0x3c46 <main+0x2c6>
    3c4a:	9a 83       	std	Y+2, r25	; 0x02
    3c4c:	89 83       	std	Y+1, r24	; 0x01
    3c4e:	aa ce       	rjmp	.-684    	; 0x39a4 <main+0x24>

00003c50 <__udivmodhi4>:
    3c50:	aa 1b       	sub	r26, r26
    3c52:	bb 1b       	sub	r27, r27
    3c54:	51 e1       	ldi	r21, 0x11	; 17
    3c56:	07 c0       	rjmp	.+14     	; 0x3c66 <__udivmodhi4_ep>

00003c58 <__udivmodhi4_loop>:
    3c58:	aa 1f       	adc	r26, r26
    3c5a:	bb 1f       	adc	r27, r27
    3c5c:	a6 17       	cp	r26, r22
    3c5e:	b7 07       	cpc	r27, r23
    3c60:	10 f0       	brcs	.+4      	; 0x3c66 <__udivmodhi4_ep>
    3c62:	a6 1b       	sub	r26, r22
    3c64:	b7 0b       	sbc	r27, r23

00003c66 <__udivmodhi4_ep>:
    3c66:	88 1f       	adc	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	5a 95       	dec	r21
    3c6c:	a9 f7       	brne	.-22     	; 0x3c58 <__udivmodhi4_loop>
    3c6e:	80 95       	com	r24
    3c70:	90 95       	com	r25
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	08 95       	ret

00003c78 <__prologue_saves__>:
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	ca 1b       	sub	r28, r26
    3ca2:	db 0b       	sbc	r29, r27
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	09 94       	ijmp

00003cb0 <__epilogue_restores__>:
    3cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    3cb2:	39 88       	ldd	r3, Y+17	; 0x11
    3cb4:	48 88       	ldd	r4, Y+16	; 0x10
    3cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cc6:	df 80       	ldd	r13, Y+7	; 0x07
    3cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cca:	fd 80       	ldd	r15, Y+5	; 0x05
    3ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cce:	1b 81       	ldd	r17, Y+3	; 0x03
    3cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cd4:	ce 0f       	add	r28, r30
    3cd6:	d1 1d       	adc	r29, r1
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	ed 01       	movw	r28, r26
    3ce4:	08 95       	ret

00003ce6 <itoa>:
    3ce6:	fb 01       	movw	r30, r22
    3ce8:	9f 01       	movw	r18, r30
    3cea:	e8 94       	clt
    3cec:	42 30       	cpi	r20, 0x02	; 2
    3cee:	c4 f0       	brlt	.+48     	; 0x3d20 <itoa+0x3a>
    3cf0:	45 32       	cpi	r20, 0x25	; 37
    3cf2:	b4 f4       	brge	.+44     	; 0x3d20 <itoa+0x3a>
    3cf4:	4a 30       	cpi	r20, 0x0A	; 10
    3cf6:	29 f4       	brne	.+10     	; 0x3d02 <itoa+0x1c>
    3cf8:	97 fb       	bst	r25, 7
    3cfa:	1e f4       	brtc	.+6      	; 0x3d02 <itoa+0x1c>
    3cfc:	90 95       	com	r25
    3cfe:	81 95       	neg	r24
    3d00:	9f 4f       	sbci	r25, 0xFF	; 255
    3d02:	64 2f       	mov	r22, r20
    3d04:	77 27       	eor	r23, r23
    3d06:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <__udivmodhi4>
    3d0a:	80 5d       	subi	r24, 0xD0	; 208
    3d0c:	8a 33       	cpi	r24, 0x3A	; 58
    3d0e:	0c f0       	brlt	.+2      	; 0x3d12 <itoa+0x2c>
    3d10:	89 5d       	subi	r24, 0xD9	; 217
    3d12:	81 93       	st	Z+, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	a1 f7       	brne	.-24     	; 0x3d02 <itoa+0x1c>
    3d1a:	16 f4       	brtc	.+4      	; 0x3d20 <itoa+0x3a>
    3d1c:	5d e2       	ldi	r21, 0x2D	; 45
    3d1e:	51 93       	st	Z+, r21
    3d20:	10 82       	st	Z, r1
    3d22:	c9 01       	movw	r24, r18
    3d24:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <strrev>

00003d28 <strrev>:
    3d28:	dc 01       	movw	r26, r24
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	67 2f       	mov	r22, r23
    3d2e:	71 91       	ld	r23, Z+
    3d30:	77 23       	and	r23, r23
    3d32:	e1 f7       	brne	.-8      	; 0x3d2c <strrev+0x4>
    3d34:	32 97       	sbiw	r30, 0x02	; 2
    3d36:	04 c0       	rjmp	.+8      	; 0x3d40 <strrev+0x18>
    3d38:	7c 91       	ld	r23, X
    3d3a:	6d 93       	st	X+, r22
    3d3c:	70 83       	st	Z, r23
    3d3e:	62 91       	ld	r22, -Z
    3d40:	ae 17       	cp	r26, r30
    3d42:	bf 07       	cpc	r27, r31
    3d44:	c8 f3       	brcs	.-14     	; 0x3d38 <strrev+0x10>
    3d46:	08 95       	ret

00003d48 <_exit>:
    3d48:	f8 94       	cli

00003d4a <__stop_program>:
    3d4a:	ff cf       	rjmp	.-2      	; 0x3d4a <__stop_program>
